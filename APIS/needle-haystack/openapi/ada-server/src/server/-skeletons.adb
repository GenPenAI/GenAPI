--  API Inspector
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: 1.0.0
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 6.2.1.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   package body Skeleton is


      package API_Create_Cheese is
         new Swagger.Servers.Operation
            (Handler => Create_Cheese,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/cheese");

      --  Create Cheese
      procedure Create_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Cheese_Type : Cheese_Type;
         Result : .Models.Cheese_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "Cheese_Type", Cheese_Type);
         Impl.Create_Cheese
            (Cheese_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Cheese;

      package API_Create_Cheeses_With_List_Input is
         new Swagger.Servers.Operation
            (Handler => Create_Cheeses_With_List_Input,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/cheese/createWithList");

      --  Creates list of Cheese with given input array
      procedure Create_Cheeses_With_List_Input
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Cheese : .Models.Cheese_Type_Vectors.Vector;
         Result : .Models.Cheese_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "Cheese", Cheese);
         Impl.Create_Cheeses_With_List_Input
            (Cheese, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Cheeses_With_List_Input;

      package API_Delete_Cheese is
         new Swagger.Servers.Operation
            (Handler => Delete_Cheese,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/cheese/{name}");

      --  Delete cheese
      procedure Delete_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Impl.Delete_Cheese
            (Name, Context);

      end Delete_Cheese;

      package API_Get_Cheese_By_Name is
         new Swagger.Servers.Operation
            (Handler => Get_Cheese_By_Name,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/cheese/{name}");

      --  Get cheese by name
      procedure Get_Cheese_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Result : .Models.Cheese_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Impl.Get_Cheese_By_Name
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Cheese_By_Name;

      package API_Update_Cheese is
         new Swagger.Servers.Operation
            (Handler => Update_Cheese,
             Method  => Swagger.Servers.PUT,
             URI     => URI_Prefix & "/cheese/{name}");

      --  Update cheese
      procedure Update_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Cheese_Type : Cheese_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "Cheese_Type", Cheese_Type);
         Impl.Update_Cheese
            (Name,
             Cheese_Type, Context);

      end Update_Cheese;

      package API_Create_User is
         new Swagger.Servers.Operation
            (Handler => Create_User,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/user");

      --  Create user
      procedure Create_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         User_Type : User_Type;
         Result : .Models.User_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "User_Type", User_Type);
         Impl.Create_User
            (User_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_User;

      package API_Create_Users_With_List_Input is
         new Swagger.Servers.Operation
            (Handler => Create_Users_With_List_Input,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/user/createWithList");

      --  Creates list of users with given input array
      procedure Create_Users_With_List_Input
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         User : .Models.User_Type_Vectors.Vector;
         Result : .Models.User_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "User", User);
         Impl.Create_Users_With_List_Input
            (User, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Users_With_List_Input;

      package API_Delete_User is
         new Swagger.Servers.Operation
            (Handler => Delete_User,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/user/{username}");

      --  Delete user
      procedure Delete_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Username : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Username);
         Impl.Delete_User
            (Username, Context);

      end Delete_User;

      package API_Get_User_By_Name is
         new Swagger.Servers.Operation
            (Handler => Get_User_By_Name,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user/{username}");

      --  Get user by user name
      procedure Get_User_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Username : Swagger.UString;
         Result : .Models.User_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Username);
         Impl.Get_User_By_Name
            (Username, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User_By_Name;

      package API_Login_User is
         new Swagger.Servers.Operation
            (Handler => Login_User,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user/login");

      --  Logs user into the system
      procedure Login_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Username : Swagger.Nullable_UString;
         Password : Swagger.Nullable_UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "username", Username);
         Swagger.Servers.Get_Query_Parameter (Req, "password", Password);
         Impl.Login_User
            (Username,
             Password, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Login_User;

      package API_Logout_User is
         new Swagger.Servers.Operation
            (Handler => Logout_User,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user/logout");

      --  Logs out current logged in user session
      procedure Logout_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
      begin
         Impl.Logout_User (Context);

      end Logout_User;

      package API_Update_User is
         new Swagger.Servers.Operation
            (Handler => Update_User,
             Method  => Swagger.Servers.PUT,
             URI     => URI_Prefix & "/user/{username}");

      --  Update user
      procedure Update_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Username : Swagger.UString;
         User_Type : User_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Username);
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "User_Type", User_Type);
         Impl.Update_User
            (Username,
             User_Type, Context);

      end Update_User;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Create_Cheese.Definition);
         Swagger.Servers.Register (Server, API_Create_Cheeses_With_List_Input.Definition);
         Swagger.Servers.Register (Server, API_Delete_Cheese.Definition);
         Swagger.Servers.Register (Server, API_Get_Cheese_By_Name.Definition);
         Swagger.Servers.Register (Server, API_Update_Cheese.Definition);
         Swagger.Servers.Register (Server, API_Create_User.Definition);
         Swagger.Servers.Register (Server, API_Create_Users_With_List_Input.Definition);
         Swagger.Servers.Register (Server, API_Delete_User.Definition);
         Swagger.Servers.Register (Server, API_Get_User_By_Name.Definition);
         Swagger.Servers.Register (Server, API_Login_User.Definition);
         Swagger.Servers.Register (Server, API_Logout_User.Definition);
         Swagger.Servers.Register (Server, API_Update_User.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Create Cheese
      procedure Create_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Cheese_Type : Cheese_Type;
         Result : .Models.Cheese_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "Cheese_Type", Cheese_Type);
         Server.Create_Cheese
            (Cheese_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Cheese;

      package API_Create_Cheese is
         new Swagger.Servers.Operation
            (Handler => Create_Cheese,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/cheese");

      --  Creates list of Cheese with given input array
      procedure Create_Cheeses_With_List_Input
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Cheese : .Models.Cheese_Type_Vectors.Vector;
         Result : .Models.Cheese_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "Cheese", Cheese);
         Server.Create_Cheeses_With_List_Input
            (Cheese, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Cheeses_With_List_Input;

      package API_Create_Cheeses_With_List_Input is
         new Swagger.Servers.Operation
            (Handler => Create_Cheeses_With_List_Input,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/cheese/createWithList");

      --  Delete cheese
      procedure Delete_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Server.Delete_Cheese
            (Name, Context);

      end Delete_Cheese;

      package API_Delete_Cheese is
         new Swagger.Servers.Operation
            (Handler => Delete_Cheese,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/cheese/{name}");

      --  Get cheese by name
      procedure Get_Cheese_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Result : .Models.Cheese_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Server.Get_Cheese_By_Name
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Cheese_By_Name;

      package API_Get_Cheese_By_Name is
         new Swagger.Servers.Operation
            (Handler => Get_Cheese_By_Name,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/cheese/{name}");

      --  Update cheese
      procedure Update_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Name : Swagger.UString;
         Cheese_Type : Cheese_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Name);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "Cheese_Type", Cheese_Type);
         Server.Update_Cheese
            (Name,
             Cheese_Type, Context);

      end Update_Cheese;

      package API_Update_Cheese is
         new Swagger.Servers.Operation
            (Handler => Update_Cheese,
             Method  => Swagger.Servers.PUT,
             URI     => URI_Prefix & "/cheese/{name}");

      --  Create user
      procedure Create_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         User_Type : User_Type;
         Result : .Models.User_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "User_Type", User_Type);
         Server.Create_User
            (User_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_User;

      package API_Create_User is
         new Swagger.Servers.Operation
            (Handler => Create_User,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/user");

      --  Creates list of users with given input array
      procedure Create_Users_With_List_Input
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         User : .Models.User_Type_Vectors.Vector;
         Result : .Models.User_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "User", User);
         Server.Create_Users_With_List_Input
            (User, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Users_With_List_Input;

      package API_Create_Users_With_List_Input is
         new Swagger.Servers.Operation
            (Handler => Create_Users_With_List_Input,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/user/createWithList");

      --  Delete user
      procedure Delete_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Username : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Username);
         Server.Delete_User
            (Username, Context);

      end Delete_User;

      package API_Delete_User is
         new Swagger.Servers.Operation
            (Handler => Delete_User,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/user/{username}");

      --  Get user by user name
      procedure Get_User_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Username : Swagger.UString;
         Result : .Models.User_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Username);
         Server.Get_User_By_Name
            (Username, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User_By_Name;

      package API_Get_User_By_Name is
         new Swagger.Servers.Operation
            (Handler => Get_User_By_Name,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user/{username}");

      --  Logs user into the system
      procedure Login_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Username : Swagger.Nullable_UString;
         Password : Swagger.Nullable_UString;
         Result : Swagger.UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "username", Username);
         Swagger.Servers.Get_Query_Parameter (Req, "password", Password);
         Server.Login_User
            (Username,
             Password, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Login_User;

      package API_Login_User is
         new Swagger.Servers.Operation
            (Handler => Login_User,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user/login");

      --  Logs out current logged in user session
      procedure Logout_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
      begin
         Server.Logout_User (Context);

      end Logout_User;

      package API_Logout_User is
         new Swagger.Servers.Operation
            (Handler => Logout_User,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user/logout");

      --  Update user
      procedure Update_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Username : Swagger.UString;
         User_Type : User_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Username);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "User_Type", User_Type);
         Server.Update_User
            (Username,
             User_Type, Context);

      end Update_User;

      package API_Update_User is
         new Swagger.Servers.Operation
            (Handler => Update_User,
             Method  => Swagger.Servers.PUT,
             URI     => URI_Prefix & "/user/{username}");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Create_Cheese.Definition);
         Swagger.Servers.Register (Server, API_Create_Cheeses_With_List_Input.Definition);
         Swagger.Servers.Register (Server, API_Delete_Cheese.Definition);
         Swagger.Servers.Register (Server, API_Get_Cheese_By_Name.Definition);
         Swagger.Servers.Register (Server, API_Update_Cheese.Definition);
         Swagger.Servers.Register (Server, API_Create_User.Definition);
         Swagger.Servers.Register (Server, API_Create_Users_With_List_Input.Definition);
         Swagger.Servers.Register (Server, API_Delete_User.Definition);
         Swagger.Servers.Register (Server, API_Get_User_By_Name.Definition);
         Swagger.Servers.Register (Server, API_Login_User.Definition);
         Swagger.Servers.Register (Server, API_Logout_User.Definition);
         Swagger.Servers.Register (Server, API_Update_User.Definition);
      end Register;

      protected body Server is
         --  Create Cheese
         procedure Create_Cheese
            (Cheese_Type : in Cheese_Type;
             Result : out .Models.Cheese_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Cheese
               (Cheese_Type,
                Result,
                Context);
         end Create_Cheese;

         --  Creates list of Cheese with given input array
         procedure Create_Cheeses_With_List_Input
            (Cheese : in .Models.Cheese_Type_Vectors.Vector;
             Result : out .Models.Cheese_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Cheeses_With_List_Input
               (Cheese,
                Result,
                Context);
         end Create_Cheeses_With_List_Input;

         --  Delete cheese
         procedure Delete_Cheese
            (Name : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Cheese
               (Name,
                Context);
         end Delete_Cheese;

         --  Get cheese by name
         procedure Get_Cheese_By_Name
            (Name : in Swagger.UString;
             Result : out .Models.Cheese_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Cheese_By_Name
               (Name,
                Result,
                Context);
         end Get_Cheese_By_Name;

         --  Update cheese
         procedure Update_Cheese
            (Name : in Swagger.UString;
             Cheese_Type : in Cheese_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Cheese
               (Name,
                Cheese_Type,
                Context);
         end Update_Cheese;

         --  Create user
         procedure Create_User
            (User_Type : in User_Type;
             Result : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_User
               (User_Type,
                Result,
                Context);
         end Create_User;

         --  Creates list of users with given input array
         procedure Create_Users_With_List_Input
            (User : in .Models.User_Type_Vectors.Vector;
             Result : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Users_With_List_Input
               (User,
                Result,
                Context);
         end Create_Users_With_List_Input;

         --  Delete user
         procedure Delete_User
            (Username : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_User
               (Username,
                Context);
         end Delete_User;

         --  Get user by user name
         procedure Get_User_By_Name
            (Username : in Swagger.UString;
             Result : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_User_By_Name
               (Username,
                Result,
                Context);
         end Get_User_By_Name;

         --  Logs user into the system
         procedure Login_User
            (Username : in Swagger.Nullable_UString;
             Password : in Swagger.Nullable_UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Login_User
               (Username,
                Password,
                Result,
                Context);
         end Login_User;

         --  Logs out current logged in user session
         procedure Logout_User (Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Logout_User (Context);
         end Logout_User;

         --  Update user
         procedure Update_User
            (Username : in Swagger.UString;
             User_Type : in User_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_User
               (Username,
                User_Type,
                Context);
         end Update_User;

      end Server;

   end Shared_Instance;

end .Skeletons;
