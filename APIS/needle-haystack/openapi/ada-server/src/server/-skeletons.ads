--  API Inspector
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: 1.0.0
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 6.2.1.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
pragma Warnings (Off, "*no entities of*are referenced");
with Swagger.Servers;
with .Models;
with Security.Permissions;
package .Skeletons is
   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*use clause for package*");
   use .Models;
   type Server_Type is limited interface;



   --  Create Cheese
   --  This can only be done by the logged in user.
   procedure Create_Cheese
      (Server : in out Server_Type;
       Cheese_Type : in Cheese_Type;
       Result  : out .Models.Cheese_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Creates list of Cheese with given input array
   --  Creates list of cheese with given input array
   procedure Create_Cheeses_With_List_Input
      (Server : in out Server_Type;
       Cheese : in .Models.Cheese_Type_Vectors.Vector;
       Result  : out .Models.Cheese_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Delete cheese
   --  This can only be done by the logged in user.
   procedure Delete_Cheese
      (Server : in out Server_Type;
       Name : in Swagger.UString;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Get cheese by name
   procedure Get_Cheese_By_Name
      (Server : in out Server_Type;
       Name : in Swagger.UString;
       Result  : out .Models.Cheese_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Update cheese
   --  This can only be done by the logged in user.
   procedure Update_Cheese
      (Server : in out Server_Type;
       Name : in Swagger.UString;
       Cheese_Type : in Cheese_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Create user
   --  This can only be done by the logged in user.
   procedure Create_User
      (Server : in out Server_Type;
       User_Type : in User_Type;
       Result  : out .Models.User_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Creates list of users with given input array
   --  Creates list of users with given input array
   procedure Create_Users_With_List_Input
      (Server : in out Server_Type;
       User : in .Models.User_Type_Vectors.Vector;
       Result  : out .Models.User_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Delete user
   --  This can only be done by the logged in user.
   procedure Delete_User
      (Server : in out Server_Type;
       Username : in Swagger.UString;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Get user by user name
   procedure Get_User_By_Name
      (Server : in out Server_Type;
       Username : in Swagger.UString;
       Result  : out .Models.User_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Logs user into the system
   procedure Login_User
      (Server : in out Server_Type;
       Username : in Swagger.Nullable_UString;
       Password : in Swagger.Nullable_UString;
       Result  : out Swagger.UString;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Logs out current logged in user session
   procedure Logout_User
      (Server : in out Server_Type
       ;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Update user
   --  This can only be done by the logged in user.
   procedure Update_User
      (Server : in out Server_Type;
       Username : in Swagger.UString;
       User_Type : in User_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   generic
      type Implementation_Type is limited new Server_Type with private;
      URI_Prefix : String := "";
   package Skeleton is

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class);


      --  Create Cheese
      procedure Create_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Creates list of Cheese with given input array
      procedure Create_Cheeses_With_List_Input
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Delete cheese
      procedure Delete_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Get cheese by name
      procedure Get_Cheese_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Update cheese
      procedure Update_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Create user
      procedure Create_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Creates list of users with given input array
      procedure Create_Users_With_List_Input
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Delete user
      procedure Delete_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Get user by user name
      procedure Get_User_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Logs user into the system
      procedure Login_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Logs out current logged in user session
      procedure Logout_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Update user
      procedure Update_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);

   end Skeleton;

   generic
      type Implementation_Type is limited new Server_Type with private;
      URI_Prefix : String := "";
   package Shared_Instance is

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class);


      --  Create Cheese
      procedure Create_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Creates list of Cheese with given input array
      procedure Create_Cheeses_With_List_Input
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Delete cheese
      procedure Delete_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Get cheese by name
      procedure Get_Cheese_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Update cheese
      procedure Update_Cheese
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Create user
      procedure Create_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Creates list of users with given input array
      procedure Create_Users_With_List_Input
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Delete user
      procedure Delete_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Get user by user name
      procedure Get_User_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Logs user into the system
      procedure Login_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Logs out current logged in user session
      procedure Logout_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Update user
      procedure Update_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


   private
      protected Server is

         --  Create Cheese
         procedure Create_Cheese
            (Cheese_Type : in Cheese_Type;
             Result  : out .Models.Cheese_Type;
             Context : in out Swagger.Servers.Context_Type);

         --  Creates list of Cheese with given input array
         procedure Create_Cheeses_With_List_Input
            (Cheese : in .Models.Cheese_Type_Vectors.Vector;
             Result  : out .Models.Cheese_Type;
             Context : in out Swagger.Servers.Context_Type);

         --  Delete cheese
         procedure Delete_Cheese
            (Name : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type);

         --  Get cheese by name
         procedure Get_Cheese_By_Name
            (Name : in Swagger.UString;
             Result  : out .Models.Cheese_Type;
             Context : in out Swagger.Servers.Context_Type);

         --  Update cheese
         procedure Update_Cheese
            (Name : in Swagger.UString;
             Cheese_Type : in Cheese_Type;
             Context : in out Swagger.Servers.Context_Type);

         --  Create user
         procedure Create_User
            (User_Type : in User_Type;
             Result  : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type);

         --  Creates list of users with given input array
         procedure Create_Users_With_List_Input
            (User : in .Models.User_Type_Vectors.Vector;
             Result  : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type);

         --  Delete user
         procedure Delete_User
            (Username : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type);

         --  Get user by user name
         procedure Get_User_By_Name
            (Username : in Swagger.UString;
             Result  : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type);

         --  Logs user into the system
         procedure Login_User
            (Username : in Swagger.Nullable_UString;
             Password : in Swagger.Nullable_UString;
             Result  : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type);

         --  Logs out current logged in user session
         procedure Logout_User (Context : in out Swagger.Servers.Context_Type);

         --  Update user
         procedure Update_User
            (Username : in Swagger.UString;
             User_Type : in User_Type;
             Context : in out Swagger.Servers.Context_Type);

      private
         Impl : Implementation_Type;
      end Server;
   end Shared_Instance;

end .Skeletons;
