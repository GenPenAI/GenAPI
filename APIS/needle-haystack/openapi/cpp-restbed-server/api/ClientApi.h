/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ClientApi.h
 *
 * 
 */

#ifndef ClientApi_H_
#define ClientApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Client.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ClientApiException: public std::exception
{
public:
    ClientApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ClientApiResources {
/// <summary>
/// Create Client
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  ClientResource: public restbed::Resource
{
public:
    ClientResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~ClientResource() = default;

    ClientResource(
        const ClientResource& other) = default; // copy constructor
    ClientResource(ClientResource&& other) noexcept = default; // move constructor

    ClientResource& operator=(const ClientResource& other) = default; // copy assignment
    ClientResource& operator=(ClientResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Client>(
        Client & client)> handler_POST_func =
            [](Client &) -> std::pair<int, Client>
                { throw ClientApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Client> handler_POST(
        Client & client);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleClientApiException(const ClientApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates list of Client with given input array
/// </summary>
/// <remarks>
/// Creates list of client with given input array
/// </remarks>
class  ClientCreateWithListResource: public restbed::Resource
{
public:
    ClientCreateWithListResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~ClientCreateWithListResource() = default;

    ClientCreateWithListResource(
        const ClientCreateWithListResource& other) = default; // copy constructor
    ClientCreateWithListResource(ClientCreateWithListResource&& other) noexcept = default; // move constructor

    ClientCreateWithListResource& operator=(const ClientCreateWithListResource& other) = default; // copy assignment
    ClientCreateWithListResource& operator=(ClientCreateWithListResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Client>(
        std::vector<Client> & client)> handler_POST_func =
            [](std::vector<Client> &) -> std::pair<int, Client>
                { throw ClientApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Client> handler_POST(
        std::vector<Client> & client);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleClientApiException(const ClientApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete client
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  ClientNameResource: public restbed::Resource
{
public:
    ClientNameResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~ClientNameResource() = default;

    ClientNameResource(
        const ClientNameResource& other) = default; // copy constructor
    ClientNameResource(ClientNameResource&& other) noexcept = default; // move constructor

    ClientNameResource& operator=(const ClientNameResource& other) = default; // copy assignment
    ClientNameResource& operator=(ClientNameResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name)> handler_DELETE_func =
            [](std::string &) -> int
                { throw ClientApiException(501, "Not implemented"); };

    std::function<std::pair<int, Client>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, Client>
                { throw ClientApiException(501, "Not implemented"); };

    std::function<int(
        std::string & name, Client & client)> handler_PUT_func =
            [](std::string &, Client &) -> int
                { throw ClientApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & name);

    virtual std::pair<int, Client> handler_GET(
        std::string & name);
    virtual int handler_PUT(
        std::string & name, Client & client);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleClientApiException(const ClientApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ClientApiResources */

using ClientApiClientResource [[deprecated]] = ClientApiResources::ClientResource;
using ClientApiClientCreateWithListResource [[deprecated]] = ClientApiResources::ClientCreateWithListResource;
using ClientApiClientNameResource [[deprecated]] = ClientApiResources::ClientNameResource;

//
// The restbed service to actually implement the REST server
//
class  ClientApi
{
public:
    explicit ClientApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~ClientApi();

    std::shared_ptr<ClientApiResources::ClientResource> getClientResource();
    std::shared_ptr<ClientApiResources::ClientCreateWithListResource> getClientCreateWithListResource();
    std::shared_ptr<ClientApiResources::ClientNameResource> getClientNameResource();

    void setResource(std::shared_ptr<ClientApiResources::ClientResource> resource);
    void setResource(std::shared_ptr<ClientApiResources::ClientCreateWithListResource> resource);
    void setResource(std::shared_ptr<ClientApiResources::ClientNameResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setClientApiClientResource(std::shared_ptr<ClientApiResources::ClientResource> spClientApiClientResource);
    [[deprecated("use setResource()")]]
    virtual void setClientApiClientCreateWithListResource(std::shared_ptr<ClientApiResources::ClientCreateWithListResource> spClientApiClientCreateWithListResource);
    [[deprecated("use setResource()")]]
    virtual void setClientApiClientNameResource(std::shared_ptr<ClientApiResources::ClientNameResource> spClientApiClientNameResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<ClientApiResources::ClientResource> m_spClientResource;
	std::shared_ptr<ClientApiResources::ClientCreateWithListResource> m_spClientCreateWithListResource;
	std::shared_ptr<ClientApiResources::ClientNameResource> m_spClientNameResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ClientApi_H_ */

