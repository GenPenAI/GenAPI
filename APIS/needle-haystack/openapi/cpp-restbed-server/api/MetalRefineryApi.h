/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MetalRefineryApi.h
 *
 * 
 */

#ifndef MetalRefineryApi_H_
#define MetalRefineryApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "MetalRefinery.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  MetalRefineryApiException: public std::exception
{
public:
    MetalRefineryApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace MetalRefineryApiResources {
/// <summary>
/// Create MetalRefinery
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  MetalRefineryResource: public restbed::Resource
{
public:
    MetalRefineryResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MetalRefineryResource() = default;

    MetalRefineryResource(
        const MetalRefineryResource& other) = default; // copy constructor
    MetalRefineryResource(MetalRefineryResource&& other) noexcept = default; // move constructor

    MetalRefineryResource& operator=(const MetalRefineryResource& other) = default; // copy assignment
    MetalRefineryResource& operator=(MetalRefineryResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MetalRefinery>(
        MetalRefinery & metalRefinery)> handler_POST_func =
            [](MetalRefinery &) -> std::pair<int, MetalRefinery>
                { throw MetalRefineryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MetalRefinery> handler_POST(
        MetalRefinery & metalRefinery);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMetalRefineryApiException(const MetalRefineryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates list of MetalRefinery with given input array
/// </summary>
/// <remarks>
/// Creates list of metalRefinery with given input array
/// </remarks>
class  MetalRefineryCreateWithListResource: public restbed::Resource
{
public:
    MetalRefineryCreateWithListResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MetalRefineryCreateWithListResource() = default;

    MetalRefineryCreateWithListResource(
        const MetalRefineryCreateWithListResource& other) = default; // copy constructor
    MetalRefineryCreateWithListResource(MetalRefineryCreateWithListResource&& other) noexcept = default; // move constructor

    MetalRefineryCreateWithListResource& operator=(const MetalRefineryCreateWithListResource& other) = default; // copy assignment
    MetalRefineryCreateWithListResource& operator=(MetalRefineryCreateWithListResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MetalRefinery>(
        std::vector<MetalRefinery> & metalRefinery)> handler_POST_func =
            [](std::vector<MetalRefinery> &) -> std::pair<int, MetalRefinery>
                { throw MetalRefineryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MetalRefinery> handler_POST(
        std::vector<MetalRefinery> & metalRefinery);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMetalRefineryApiException(const MetalRefineryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete metalRefinery
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  MetalRefineryNameResource: public restbed::Resource
{
public:
    MetalRefineryNameResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MetalRefineryNameResource() = default;

    MetalRefineryNameResource(
        const MetalRefineryNameResource& other) = default; // copy constructor
    MetalRefineryNameResource(MetalRefineryNameResource&& other) noexcept = default; // move constructor

    MetalRefineryNameResource& operator=(const MetalRefineryNameResource& other) = default; // copy assignment
    MetalRefineryNameResource& operator=(MetalRefineryNameResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name)> handler_DELETE_func =
            [](std::string &) -> int
                { throw MetalRefineryApiException(501, "Not implemented"); };

    std::function<std::pair<int, MetalRefinery>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, MetalRefinery>
                { throw MetalRefineryApiException(501, "Not implemented"); };

    std::function<int(
        std::string & name, MetalRefinery & metalRefinery)> handler_PUT_func =
            [](std::string &, MetalRefinery &) -> int
                { throw MetalRefineryApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & name);

    virtual std::pair<int, MetalRefinery> handler_GET(
        std::string & name);
    virtual int handler_PUT(
        std::string & name, MetalRefinery & metalRefinery);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMetalRefineryApiException(const MetalRefineryApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace MetalRefineryApiResources */

using MetalRefineryApiMetalRefineryResource [[deprecated]] = MetalRefineryApiResources::MetalRefineryResource;
using MetalRefineryApiMetalRefineryCreateWithListResource [[deprecated]] = MetalRefineryApiResources::MetalRefineryCreateWithListResource;
using MetalRefineryApiMetalRefineryNameResource [[deprecated]] = MetalRefineryApiResources::MetalRefineryNameResource;

//
// The restbed service to actually implement the REST server
//
class  MetalRefineryApi
{
public:
    explicit MetalRefineryApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~MetalRefineryApi();

    std::shared_ptr<MetalRefineryApiResources::MetalRefineryResource> getMetalRefineryResource();
    std::shared_ptr<MetalRefineryApiResources::MetalRefineryCreateWithListResource> getMetalRefineryCreateWithListResource();
    std::shared_ptr<MetalRefineryApiResources::MetalRefineryNameResource> getMetalRefineryNameResource();

    void setResource(std::shared_ptr<MetalRefineryApiResources::MetalRefineryResource> resource);
    void setResource(std::shared_ptr<MetalRefineryApiResources::MetalRefineryCreateWithListResource> resource);
    void setResource(std::shared_ptr<MetalRefineryApiResources::MetalRefineryNameResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setMetalRefineryApiMetalRefineryResource(std::shared_ptr<MetalRefineryApiResources::MetalRefineryResource> spMetalRefineryApiMetalRefineryResource);
    [[deprecated("use setResource()")]]
    virtual void setMetalRefineryApiMetalRefineryCreateWithListResource(std::shared_ptr<MetalRefineryApiResources::MetalRefineryCreateWithListResource> spMetalRefineryApiMetalRefineryCreateWithListResource);
    [[deprecated("use setResource()")]]
    virtual void setMetalRefineryApiMetalRefineryNameResource(std::shared_ptr<MetalRefineryApiResources::MetalRefineryNameResource> spMetalRefineryApiMetalRefineryNameResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<MetalRefineryApiResources::MetalRefineryResource> m_spMetalRefineryResource;
	std::shared_ptr<MetalRefineryApiResources::MetalRefineryCreateWithListResource> m_spMetalRefineryCreateWithListResource;
	std::shared_ptr<MetalRefineryApiResources::MetalRefineryNameResource> m_spMetalRefineryNameResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* MetalRefineryApi_H_ */

