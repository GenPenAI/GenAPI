/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MineApi.h
 *
 * 
 */

#ifndef MineApi_H_
#define MineApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Mine.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  MineApiException: public std::exception
{
public:
    MineApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace MineApiResources {
/// <summary>
/// Create Mine
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  MineResource: public restbed::Resource
{
public:
    MineResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MineResource() = default;

    MineResource(
        const MineResource& other) = default; // copy constructor
    MineResource(MineResource&& other) noexcept = default; // move constructor

    MineResource& operator=(const MineResource& other) = default; // copy assignment
    MineResource& operator=(MineResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Mine>(
        Mine & mine)> handler_POST_func =
            [](Mine &) -> std::pair<int, Mine>
                { throw MineApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Mine> handler_POST(
        Mine & mine);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMineApiException(const MineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates list of Mine with given input array
/// </summary>
/// <remarks>
/// Creates list of mine with given input array
/// </remarks>
class  MineCreateWithListResource: public restbed::Resource
{
public:
    MineCreateWithListResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MineCreateWithListResource() = default;

    MineCreateWithListResource(
        const MineCreateWithListResource& other) = default; // copy constructor
    MineCreateWithListResource(MineCreateWithListResource&& other) noexcept = default; // move constructor

    MineCreateWithListResource& operator=(const MineCreateWithListResource& other) = default; // copy assignment
    MineCreateWithListResource& operator=(MineCreateWithListResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Mine>(
        std::vector<Mine> & mine)> handler_POST_func =
            [](std::vector<Mine> &) -> std::pair<int, Mine>
                { throw MineApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Mine> handler_POST(
        std::vector<Mine> & mine);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMineApiException(const MineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete mine
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  MineNameResource: public restbed::Resource
{
public:
    MineNameResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MineNameResource() = default;

    MineNameResource(
        const MineNameResource& other) = default; // copy constructor
    MineNameResource(MineNameResource&& other) noexcept = default; // move constructor

    MineNameResource& operator=(const MineNameResource& other) = default; // copy assignment
    MineNameResource& operator=(MineNameResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name)> handler_DELETE_func =
            [](std::string &) -> int
                { throw MineApiException(501, "Not implemented"); };

    std::function<std::pair<int, Mine>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, Mine>
                { throw MineApiException(501, "Not implemented"); };

    std::function<int(
        std::string & name, Mine & mine)> handler_PUT_func =
            [](std::string &, Mine &) -> int
                { throw MineApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & name);

    virtual std::pair<int, Mine> handler_GET(
        std::string & name);
    virtual int handler_PUT(
        std::string & name, Mine & mine);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMineApiException(const MineApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace MineApiResources */

using MineApiMineResource [[deprecated]] = MineApiResources::MineResource;
using MineApiMineCreateWithListResource [[deprecated]] = MineApiResources::MineCreateWithListResource;
using MineApiMineNameResource [[deprecated]] = MineApiResources::MineNameResource;

//
// The restbed service to actually implement the REST server
//
class  MineApi
{
public:
    explicit MineApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~MineApi();

    std::shared_ptr<MineApiResources::MineResource> getMineResource();
    std::shared_ptr<MineApiResources::MineCreateWithListResource> getMineCreateWithListResource();
    std::shared_ptr<MineApiResources::MineNameResource> getMineNameResource();

    void setResource(std::shared_ptr<MineApiResources::MineResource> resource);
    void setResource(std::shared_ptr<MineApiResources::MineCreateWithListResource> resource);
    void setResource(std::shared_ptr<MineApiResources::MineNameResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setMineApiMineResource(std::shared_ptr<MineApiResources::MineResource> spMineApiMineResource);
    [[deprecated("use setResource()")]]
    virtual void setMineApiMineCreateWithListResource(std::shared_ptr<MineApiResources::MineCreateWithListResource> spMineApiMineCreateWithListResource);
    [[deprecated("use setResource()")]]
    virtual void setMineApiMineNameResource(std::shared_ptr<MineApiResources::MineNameResource> spMineApiMineNameResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<MineApiResources::MineResource> m_spMineResource;
	std::shared_ptr<MineApiResources::MineCreateWithListResource> m_spMineCreateWithListResource;
	std::shared_ptr<MineApiResources::MineNameResource> m_spMineNameResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* MineApi_H_ */

