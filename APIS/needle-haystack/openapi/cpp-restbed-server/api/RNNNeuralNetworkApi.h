/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RNNNeuralNetworkApi.h
 *
 * 
 */

#ifndef RNNNeuralNetworkApi_H_
#define RNNNeuralNetworkApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "RnnNeuralNetwork.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  RNNNeuralNetworkApiException: public std::exception
{
public:
    RNNNeuralNetworkApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace RNNNeuralNetworkApiResources {
/// <summary>
/// Create RnnNeuralNetwork
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  RNNNeuralNetworkResource: public restbed::Resource
{
public:
    RNNNeuralNetworkResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~RNNNeuralNetworkResource() = default;

    RNNNeuralNetworkResource(
        const RNNNeuralNetworkResource& other) = default; // copy constructor
    RNNNeuralNetworkResource(RNNNeuralNetworkResource&& other) noexcept = default; // move constructor

    RNNNeuralNetworkResource& operator=(const RNNNeuralNetworkResource& other) = default; // copy assignment
    RNNNeuralNetworkResource& operator=(RNNNeuralNetworkResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RnnNeuralNetwork>(
        RnnNeuralNetwork & rnnNeuralNetwork)> handler_POST_func =
            [](RnnNeuralNetwork &) -> std::pair<int, RnnNeuralNetwork>
                { throw RNNNeuralNetworkApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RnnNeuralNetwork> handler_POST(
        RnnNeuralNetwork & rnnNeuralNetwork);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRNNNeuralNetworkApiException(const RNNNeuralNetworkApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates list of RnnNeuralNetwork with given input array
/// </summary>
/// <remarks>
/// Creates list of rNNNeuralNetwork with given input array
/// </remarks>
class  RNNNeuralNetworkCreateWithListResource: public restbed::Resource
{
public:
    RNNNeuralNetworkCreateWithListResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~RNNNeuralNetworkCreateWithListResource() = default;

    RNNNeuralNetworkCreateWithListResource(
        const RNNNeuralNetworkCreateWithListResource& other) = default; // copy constructor
    RNNNeuralNetworkCreateWithListResource(RNNNeuralNetworkCreateWithListResource&& other) noexcept = default; // move constructor

    RNNNeuralNetworkCreateWithListResource& operator=(const RNNNeuralNetworkCreateWithListResource& other) = default; // copy assignment
    RNNNeuralNetworkCreateWithListResource& operator=(RNNNeuralNetworkCreateWithListResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RnnNeuralNetwork>(
        std::vector<RnnNeuralNetwork> & rnnNeuralNetwork)> handler_POST_func =
            [](std::vector<RnnNeuralNetwork> &) -> std::pair<int, RnnNeuralNetwork>
                { throw RNNNeuralNetworkApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RnnNeuralNetwork> handler_POST(
        std::vector<RnnNeuralNetwork> & rnnNeuralNetwork);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRNNNeuralNetworkApiException(const RNNNeuralNetworkApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete rNNNeuralNetwork
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  RNNNeuralNetworkNameResource: public restbed::Resource
{
public:
    RNNNeuralNetworkNameResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~RNNNeuralNetworkNameResource() = default;

    RNNNeuralNetworkNameResource(
        const RNNNeuralNetworkNameResource& other) = default; // copy constructor
    RNNNeuralNetworkNameResource(RNNNeuralNetworkNameResource&& other) noexcept = default; // move constructor

    RNNNeuralNetworkNameResource& operator=(const RNNNeuralNetworkNameResource& other) = default; // copy assignment
    RNNNeuralNetworkNameResource& operator=(RNNNeuralNetworkNameResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name)> handler_DELETE_func =
            [](std::string &) -> int
                { throw RNNNeuralNetworkApiException(501, "Not implemented"); };

    std::function<std::pair<int, RnnNeuralNetwork>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, RnnNeuralNetwork>
                { throw RNNNeuralNetworkApiException(501, "Not implemented"); };

    std::function<int(
        std::string & name, RnnNeuralNetwork & rnnNeuralNetwork)> handler_PUT_func =
            [](std::string &, RnnNeuralNetwork &) -> int
                { throw RNNNeuralNetworkApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & name);

    virtual std::pair<int, RnnNeuralNetwork> handler_GET(
        std::string & name);
    virtual int handler_PUT(
        std::string & name, RnnNeuralNetwork & rnnNeuralNetwork);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRNNNeuralNetworkApiException(const RNNNeuralNetworkApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace RNNNeuralNetworkApiResources */

using RNNNeuralNetworkApiRNNNeuralNetworkResource [[deprecated]] = RNNNeuralNetworkApiResources::RNNNeuralNetworkResource;
using RNNNeuralNetworkApiRNNNeuralNetworkCreateWithListResource [[deprecated]] = RNNNeuralNetworkApiResources::RNNNeuralNetworkCreateWithListResource;
using RNNNeuralNetworkApiRNNNeuralNetworkNameResource [[deprecated]] = RNNNeuralNetworkApiResources::RNNNeuralNetworkNameResource;

//
// The restbed service to actually implement the REST server
//
class  RNNNeuralNetworkApi
{
public:
    explicit RNNNeuralNetworkApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~RNNNeuralNetworkApi();

    std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkResource> getRNNNeuralNetworkResource();
    std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkCreateWithListResource> getRNNNeuralNetworkCreateWithListResource();
    std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkNameResource> getRNNNeuralNetworkNameResource();

    void setResource(std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkResource> resource);
    void setResource(std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkCreateWithListResource> resource);
    void setResource(std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkNameResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setRNNNeuralNetworkApiRNNNeuralNetworkResource(std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkResource> spRNNNeuralNetworkApiRNNNeuralNetworkResource);
    [[deprecated("use setResource()")]]
    virtual void setRNNNeuralNetworkApiRNNNeuralNetworkCreateWithListResource(std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkCreateWithListResource> spRNNNeuralNetworkApiRNNNeuralNetworkCreateWithListResource);
    [[deprecated("use setResource()")]]
    virtual void setRNNNeuralNetworkApiRNNNeuralNetworkNameResource(std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkNameResource> spRNNNeuralNetworkApiRNNNeuralNetworkNameResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkResource> m_spRNNNeuralNetworkResource;
	std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkCreateWithListResource> m_spRNNNeuralNetworkCreateWithListResource;
	std::shared_ptr<RNNNeuralNetworkApiResources::RNNNeuralNetworkNameResource> m_spRNNNeuralNetworkNameResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* RNNNeuralNetworkApi_H_ */

