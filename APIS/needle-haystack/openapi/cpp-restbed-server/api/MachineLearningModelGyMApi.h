/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MachineLearningModelGyMApi.h
 *
 * 
 */

#ifndef MachineLearningModelGyMApi_H_
#define MachineLearningModelGyMApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "MachineLearningModelGym.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  MachineLearningModelGyMApiException: public std::exception
{
public:
    MachineLearningModelGyMApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace MachineLearningModelGyMApiResources {
/// <summary>
/// Create MachineLearningModelGym
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  MachineLearningModelGyMResource: public restbed::Resource
{
public:
    MachineLearningModelGyMResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MachineLearningModelGyMResource() = default;

    MachineLearningModelGyMResource(
        const MachineLearningModelGyMResource& other) = default; // copy constructor
    MachineLearningModelGyMResource(MachineLearningModelGyMResource&& other) noexcept = default; // move constructor

    MachineLearningModelGyMResource& operator=(const MachineLearningModelGyMResource& other) = default; // copy assignment
    MachineLearningModelGyMResource& operator=(MachineLearningModelGyMResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MachineLearningModelGym>(
        MachineLearningModelGym & machineLearningModelGym)> handler_POST_func =
            [](MachineLearningModelGym &) -> std::pair<int, MachineLearningModelGym>
                { throw MachineLearningModelGyMApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MachineLearningModelGym> handler_POST(
        MachineLearningModelGym & machineLearningModelGym);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMachineLearningModelGyMApiException(const MachineLearningModelGyMApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates list of MachineLearningModelGym with given input array
/// </summary>
/// <remarks>
/// Creates list of machineLearningModelGyM with given input array
/// </remarks>
class  MachineLearningModelGyMCreateWithListResource: public restbed::Resource
{
public:
    MachineLearningModelGyMCreateWithListResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MachineLearningModelGyMCreateWithListResource() = default;

    MachineLearningModelGyMCreateWithListResource(
        const MachineLearningModelGyMCreateWithListResource& other) = default; // copy constructor
    MachineLearningModelGyMCreateWithListResource(MachineLearningModelGyMCreateWithListResource&& other) noexcept = default; // move constructor

    MachineLearningModelGyMCreateWithListResource& operator=(const MachineLearningModelGyMCreateWithListResource& other) = default; // copy assignment
    MachineLearningModelGyMCreateWithListResource& operator=(MachineLearningModelGyMCreateWithListResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MachineLearningModelGym>(
        std::vector<MachineLearningModelGym> & machineLearningModelGym)> handler_POST_func =
            [](std::vector<MachineLearningModelGym> &) -> std::pair<int, MachineLearningModelGym>
                { throw MachineLearningModelGyMApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MachineLearningModelGym> handler_POST(
        std::vector<MachineLearningModelGym> & machineLearningModelGym);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMachineLearningModelGyMApiException(const MachineLearningModelGyMApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete machineLearningModelGyM
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  MachineLearningModelGyMNameResource: public restbed::Resource
{
public:
    MachineLearningModelGyMNameResource(const std::string& context = "/openapi-jaxrs-server-1.0.0/api/v3");
    virtual ~MachineLearningModelGyMNameResource() = default;

    MachineLearningModelGyMNameResource(
        const MachineLearningModelGyMNameResource& other) = default; // copy constructor
    MachineLearningModelGyMNameResource(MachineLearningModelGyMNameResource&& other) noexcept = default; // move constructor

    MachineLearningModelGyMNameResource& operator=(const MachineLearningModelGyMNameResource& other) = default; // copy assignment
    MachineLearningModelGyMNameResource& operator=(MachineLearningModelGyMNameResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name)> handler_DELETE_func =
            [](std::string &) -> int
                { throw MachineLearningModelGyMApiException(501, "Not implemented"); };

    std::function<std::pair<int, MachineLearningModelGym>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, MachineLearningModelGym>
                { throw MachineLearningModelGyMApiException(501, "Not implemented"); };

    std::function<int(
        std::string & name, MachineLearningModelGym & machineLearningModelGym)> handler_PUT_func =
            [](std::string &, MachineLearningModelGym &) -> int
                { throw MachineLearningModelGyMApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & name);

    virtual std::pair<int, MachineLearningModelGym> handler_GET(
        std::string & name);
    virtual int handler_PUT(
        std::string & name, MachineLearningModelGym & machineLearningModelGym);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMachineLearningModelGyMApiException(const MachineLearningModelGyMApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace MachineLearningModelGyMApiResources */

using MachineLearningModelGyMApiMachineLearningModelGyMResource [[deprecated]] = MachineLearningModelGyMApiResources::MachineLearningModelGyMResource;
using MachineLearningModelGyMApiMachineLearningModelGyMCreateWithListResource [[deprecated]] = MachineLearningModelGyMApiResources::MachineLearningModelGyMCreateWithListResource;
using MachineLearningModelGyMApiMachineLearningModelGyMNameResource [[deprecated]] = MachineLearningModelGyMApiResources::MachineLearningModelGyMNameResource;

//
// The restbed service to actually implement the REST server
//
class  MachineLearningModelGyMApi
{
public:
    explicit MachineLearningModelGyMApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~MachineLearningModelGyMApi();

    std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMResource> getMachineLearningModelGyMResource();
    std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMCreateWithListResource> getMachineLearningModelGyMCreateWithListResource();
    std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMNameResource> getMachineLearningModelGyMNameResource();

    void setResource(std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMResource> resource);
    void setResource(std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMCreateWithListResource> resource);
    void setResource(std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMNameResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setMachineLearningModelGyMApiMachineLearningModelGyMResource(std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMResource> spMachineLearningModelGyMApiMachineLearningModelGyMResource);
    [[deprecated("use setResource()")]]
    virtual void setMachineLearningModelGyMApiMachineLearningModelGyMCreateWithListResource(std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMCreateWithListResource> spMachineLearningModelGyMApiMachineLearningModelGyMCreateWithListResource);
    [[deprecated("use setResource()")]]
    virtual void setMachineLearningModelGyMApiMachineLearningModelGyMNameResource(std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMNameResource> spMachineLearningModelGyMApiMachineLearningModelGyMNameResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMResource> m_spMachineLearningModelGyMResource;
	std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMCreateWithListResource> m_spMachineLearningModelGyMCreateWithListResource;
	std::shared_ptr<MachineLearningModelGyMApiResources::MachineLearningModelGyMNameResource> m_spMachineLearningModelGyMNameResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* MachineLearningModelGyMApi_H_ */

