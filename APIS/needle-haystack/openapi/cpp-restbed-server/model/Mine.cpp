/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Mine.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Mine::Mine(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string Mine::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void Mine::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Mine::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("capacity_unit", m_Capacity_unit);
	pt.put("capacity", m_Capacity);
	pt.put("power_usage", m_Power_usage);
	pt.put("duration_its_been_active", m_Duration_its_been_active);
	pt.put("active", m_Active);
	pt.put("fk_sender_id", m_Fk_sender_id);
	pt.put("risk_level", m_Risk_level);
	pt.put("created_date", m_Created_date);
	pt.put("fk_owner_id", m_Fk_owner_id);
	pt.put("mined", m_Mined);
	pt.put("length", m_Length);
	pt.put("id", m_Id);
	pt.put("date_mined", m_Date_mined);
	pt.put("width", m_Width);
	pt.put("name", m_Name);
	pt.put("commodity_type", m_Commodity_type);
	pt.put("miner_id", m_Miner_id);
	return pt;
}

void Mine::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Capacity_unit = pt.get("capacity_unit", "");
	m_Capacity = pt.get("capacity", 0);
	m_Power_usage = pt.get("power_usage", 0.0);
	m_Duration_its_been_active = pt.get("duration_its_been_active", 0);
	m_Active = pt.get("active", false);
	m_Fk_sender_id = pt.get("fk_sender_id", 0);
	m_Risk_level = pt.get("risk_level", 0);
	m_Created_date = pt.get("created_date", "");
	m_Fk_owner_id = pt.get("fk_owner_id", 0);
	m_Mined = pt.get("mined", false);
	m_Length = pt.get("length", 0);
	m_Id = pt.get("id", 0);
	m_Date_mined = pt.get("date_mined", "");
	m_Width = pt.get("width", 0);
	m_Name = pt.get("name", "");
	m_Commodity_type = pt.get("commodity_type", "");
	m_Miner_id = pt.get("miner_id", 0);
}

std::string Mine::getCapacityUnit() const
{
    return m_Capacity_unit;
}

void Mine::setCapacityUnit(std::string value)
{
    m_Capacity_unit = value;
}


int32_t Mine::getCapacity() const
{
    return m_Capacity;
}

void Mine::setCapacity(int32_t value)
{
    m_Capacity = value;
}


double Mine::getPowerUsage() const
{
    return m_Power_usage;
}

void Mine::setPowerUsage(double value)
{
    m_Power_usage = value;
}


int32_t Mine::getDurationItsBeenActive() const
{
    return m_Duration_its_been_active;
}

void Mine::setDurationItsBeenActive(int32_t value)
{
    m_Duration_its_been_active = value;
}


bool Mine::isActive() const
{
    return m_Active;
}

void Mine::setActive(bool value)
{
    m_Active = value;
}


int32_t Mine::getFkSenderId() const
{
    return m_Fk_sender_id;
}

void Mine::setFkSenderId(int32_t value)
{
    m_Fk_sender_id = value;
}


int32_t Mine::getRiskLevel() const
{
    return m_Risk_level;
}

void Mine::setRiskLevel(int32_t value)
{
    m_Risk_level = value;
}


std::string Mine::getCreatedDate() const
{
    return m_Created_date;
}

void Mine::setCreatedDate(std::string value)
{
    m_Created_date = value;
}


int32_t Mine::getFkOwnerId() const
{
    return m_Fk_owner_id;
}

void Mine::setFkOwnerId(int32_t value)
{
    m_Fk_owner_id = value;
}


bool Mine::isMined() const
{
    return m_Mined;
}

void Mine::setMined(bool value)
{
    m_Mined = value;
}


int32_t Mine::getLength() const
{
    return m_Length;
}

void Mine::setLength(int32_t value)
{
    m_Length = value;
}


int32_t Mine::getId() const
{
    return m_Id;
}

void Mine::setId(int32_t value)
{
    m_Id = value;
}


std::string Mine::getDateMined() const
{
    return m_Date_mined;
}

void Mine::setDateMined(std::string value)
{
    m_Date_mined = value;
}


int32_t Mine::getWidth() const
{
    return m_Width;
}

void Mine::setWidth(int32_t value)
{
    m_Width = value;
}


std::string Mine::getName() const
{
    return m_Name;
}

void Mine::setName(std::string value)
{
    m_Name = value;
}


std::string Mine::getCommodityType() const
{
    return m_Commodity_type;
}

void Mine::setCommodityType(std::string value)
{
    m_Commodity_type = value;
}


int32_t Mine::getMinerId() const
{
    return m_Miner_id;
}

void Mine::setMinerId(int32_t value)
{
    m_Miner_id = value;
}



std::vector<Mine> createMineVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Mine>();
    for (const auto& child: pt) {
        vec.emplace_back(Mine(child.second));
    }

    return vec;
}

}
}
}
}

