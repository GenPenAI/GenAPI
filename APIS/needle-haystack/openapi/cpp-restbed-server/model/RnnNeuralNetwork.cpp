/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RnnNeuralNetwork.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RnnNeuralNetwork::RnnNeuralNetwork(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string RnnNeuralNetwork::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void RnnNeuralNetwork::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree RnnNeuralNetwork::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("neuronConnections", m_NeuronConnections);
	pt.put("computationalPower", m_ComputationalPower);
	pt.put("trainsData", m_TrainsData);
	pt.put("symmetricStructure", m_SymmetricStructure);
	pt.put("activationFunction", m_ActivationFunction);
	pt.put("outputSequence", m_OutputSequence);
	pt.put("timeseriesAnalysis", m_TimeseriesAnalysis);
	pt.put("sequentialData", m_SequentialData);
	pt.put("weightVectorUpdates", m_WeightVectorUpdates);
	pt.put("gPO-acd", m_GPO_acd);
	pt.put("adaptiveLearning", m_AdaptiveLearning);
	pt.put("gPO-473", m_GPO_473);
	pt.put("nonlinearityFunction", m_NonlinearityFunction);
	pt.put("outputDimensionality", m_OutputDimensionality);
	pt.put("memoryCells", m_MemoryCells);
	pt.put("multipleInputs", m_MultipleInputs);
	pt.put("recurrent", m_Recurrent);
	return pt;
}

void RnnNeuralNetwork::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_NeuronConnections = pt.get("neuronConnections", 0L);
	m_ComputationalPower = pt.get("computationalPower", 0.0);
	m_TrainsData = pt.get("trainsData", false);
	m_SymmetricStructure = pt.get("symmetricStructure", false);
	m_ActivationFunction = pt.get("activationFunction", "");
	m_OutputSequence = pt.get("outputSequence", false);
	m_TimeseriesAnalysis = pt.get("timeseriesAnalysis", false);
	m_SequentialData = pt.get("sequentialData", "");
	m_WeightVectorUpdates = pt.get("weightVectorUpdates", 0.0);
	m_GPO_acd = pt.get("gPO-acd", 9482L);
	m_AdaptiveLearning = pt.get("adaptiveLearning", false);
	m_GPO_473 = pt.get("gPO-473", "9483");
	m_NonlinearityFunction = pt.get("nonlinearityFunction", "");
	m_OutputDimensionality = pt.get("outputDimensionality", 0L);
	m_MemoryCells = pt.get("memoryCells", 0L);
	m_MultipleInputs = pt.get("multipleInputs", false);
	m_Recurrent = pt.get("recurrent", false);
}

int64_t RnnNeuralNetwork::getNeuronConnections() const
{
    return m_NeuronConnections;
}

void RnnNeuralNetwork::setNeuronConnections(int64_t value)
{
    m_NeuronConnections = value;
}


double RnnNeuralNetwork::getComputationalPower() const
{
    return m_ComputationalPower;
}

void RnnNeuralNetwork::setComputationalPower(double value)
{
    m_ComputationalPower = value;
}


bool RnnNeuralNetwork::isTrainsData() const
{
    return m_TrainsData;
}

void RnnNeuralNetwork::setTrainsData(bool value)
{
    m_TrainsData = value;
}


bool RnnNeuralNetwork::isSymmetricStructure() const
{
    return m_SymmetricStructure;
}

void RnnNeuralNetwork::setSymmetricStructure(bool value)
{
    m_SymmetricStructure = value;
}


std::string RnnNeuralNetwork::getActivationFunction() const
{
    return m_ActivationFunction;
}

void RnnNeuralNetwork::setActivationFunction(std::string value)
{
    m_ActivationFunction = value;
}


bool RnnNeuralNetwork::isOutputSequence() const
{
    return m_OutputSequence;
}

void RnnNeuralNetwork::setOutputSequence(bool value)
{
    m_OutputSequence = value;
}


bool RnnNeuralNetwork::isTimeseriesAnalysis() const
{
    return m_TimeseriesAnalysis;
}

void RnnNeuralNetwork::setTimeseriesAnalysis(bool value)
{
    m_TimeseriesAnalysis = value;
}


std::string RnnNeuralNetwork::getSequentialData() const
{
    return m_SequentialData;
}

void RnnNeuralNetwork::setSequentialData(std::string value)
{
    m_SequentialData = value;
}


double RnnNeuralNetwork::getWeightVectorUpdates() const
{
    return m_WeightVectorUpdates;
}

void RnnNeuralNetwork::setWeightVectorUpdates(double value)
{
    m_WeightVectorUpdates = value;
}


int64_t RnnNeuralNetwork::getGPOAcd() const
{
    return m_GPO_acd;
}

void RnnNeuralNetwork::setGPOAcd(int64_t value)
{
    m_GPO_acd = value;
}


bool RnnNeuralNetwork::isAdaptiveLearning() const
{
    return m_AdaptiveLearning;
}

void RnnNeuralNetwork::setAdaptiveLearning(bool value)
{
    m_AdaptiveLearning = value;
}


std::string RnnNeuralNetwork::getGPO473() const
{
    return m_GPO_473;
}

void RnnNeuralNetwork::setGPO473(std::string value)
{
    m_GPO_473 = value;
}


std::string RnnNeuralNetwork::getNonlinearityFunction() const
{
    return m_NonlinearityFunction;
}

void RnnNeuralNetwork::setNonlinearityFunction(std::string value)
{
    m_NonlinearityFunction = value;
}


int64_t RnnNeuralNetwork::getOutputDimensionality() const
{
    return m_OutputDimensionality;
}

void RnnNeuralNetwork::setOutputDimensionality(int64_t value)
{
    m_OutputDimensionality = value;
}


int64_t RnnNeuralNetwork::getMemoryCells() const
{
    return m_MemoryCells;
}

void RnnNeuralNetwork::setMemoryCells(int64_t value)
{
    m_MemoryCells = value;
}


bool RnnNeuralNetwork::isMultipleInputs() const
{
    return m_MultipleInputs;
}

void RnnNeuralNetwork::setMultipleInputs(bool value)
{
    m_MultipleInputs = value;
}


bool RnnNeuralNetwork::isRecurrent() const
{
    return m_Recurrent;
}

void RnnNeuralNetwork::setRecurrent(bool value)
{
    m_Recurrent = value;
}



std::vector<RnnNeuralNetwork> createRnnNeuralNetworkVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<RnnNeuralNetwork>();
    for (const auto& child: pt) {
        vec.emplace_back(RnnNeuralNetwork(child.second));
    }

    return vec;
}

}
}
}
}

