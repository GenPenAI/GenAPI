/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Bullion.h
 *
 * 
 */

#ifndef Bullion_H_
#define Bullion_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Bullion 
{
public:
    Bullion() = default;
    explicit Bullion(boost::property_tree::ptree const& pt);
    virtual ~Bullion() = default;

    Bullion(const Bullion& other) = default; // copy constructor
    Bullion(Bullion&& other) noexcept = default; // move constructor

    Bullion& operator=(const Bullion& other) = default; // copy assignment
    Bullion& operator=(Bullion&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Bullion members

    /// <summary>
    /// This attribute is a variable named status
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// This attribute is a variable named shape
    /// </summary>
    std::string getShape() const;
    void setShape(std::string value);

    /// <summary>
    /// This attribute is a variable named price_per_oz
    /// </summary>
    double getPricePerOz() const;
    void setPricePerOz(double value);

    /// <summary>
    /// This attribute is a variable named purity_percentage
    /// </summary>
    double getPurityPercentage() const;
    void setPurityPercentage(double value);

    /// <summary>
    /// This attribute is a variable named notes
    /// </summary>
    std::string getNotes() const;
    void setNotes(std::string value);

    /// <summary>
    /// This attribute is a variable named value
    /// </summary>
    double getValue() const;
    void setValue(double value);

    /// <summary>
    /// This attribute is a variable named year_issued
    /// </summary>
    int32_t getYearIssued() const;
    void setYearIssued(int32_t value);

    /// <summary>
    /// This attribute is a variable named purity
    /// </summary>
    double getPurity() const;
    void setPurity(double value);

    /// <summary>
    /// This attribute is a variable named date_of_sale
    /// </summary>
    std::string getDateOfSale() const;
    void setDateOfSale(std::string value);

    /// <summary>
    /// This attribute is a variable named gold_troy_oz
    /// </summary>
    double getGoldTroyOz() const;
    void setGoldTroyOz(double value);

    /// <summary>
    /// This attribute is a variable named fk_owner_id
    /// </summary>
    int32_t getFkOwnerId() const;
    void setFkOwnerId(int32_t value);

    /// <summary>
    /// This attribute is a variable named num_ingots
    /// </summary>
    int32_t getNumIngots() const;
    void setNumIngots(int32_t value);

    /// <summary>
    /// This is a GenPen.AI specific attribute
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// This attribute is a variable named weight
    /// </summary>
    double getWeight() const;
    void setWeight(double value);

    /// <summary>
    /// This attribute is a variable named date_of_purchase
    /// </summary>
    std::string getDateOfPurchase() const;
    void setDateOfPurchase(std::string value);

    /// <summary>
    /// This is a GenPen.AI specific attribute
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// This attribute is a variable named fk_id
    /// </summary>
    int32_t getFkId() const;
    void setFkId(int32_t value);

    /// <summary>
    /// This attribute is a variable named metal_type
    /// </summary>
    std::string getMetalType() const;
    void setMetalType(std::string value);

protected:
    std::string m_Status = "";
    std::string m_Shape = "";
    double m_Price_per_oz = 0.0;
    double m_Purity_percentage = 0.0;
    std::string m_Notes = "";
    double m_Value = 0.0;
    int32_t m_Year_issued = 0;
    double m_Purity = 0.0;
    std::string m_Date_of_sale = "";
    double m_Gold_troy_oz = 0.0;
    int32_t m_Fk_owner_id = 0;
    int32_t m_Num_ingots = 0;
    int32_t m_Id = 0;
    double m_Weight = 0.0;
    std::string m_Date_of_purchase = "";
    std::string m_Name = "";
    int32_t m_Fk_id = 0;
    std::string m_Metal_type = "";
};

std::vector<Bullion> createBullionVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Bullion>(const Bullion& val) {
    return val.toPropertyTree();
}

template<>
inline Bullion fromPt<Bullion>(const boost::property_tree::ptree& pt) {
    Bullion ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Bullion_H_ */
