/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReinforcementLearningAgent.h
 *
 * 
 */

#ifndef ReinforcementLearningAgent_H_
#define ReinforcementLearningAgent_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ReinforcementLearningAgent 
{
public:
    ReinforcementLearningAgent() = default;
    explicit ReinforcementLearningAgent(boost::property_tree::ptree const& pt);
    virtual ~ReinforcementLearningAgent() = default;

    ReinforcementLearningAgent(const ReinforcementLearningAgent& other) = default; // copy constructor
    ReinforcementLearningAgent(ReinforcementLearningAgent&& other) noexcept = default; // move constructor

    ReinforcementLearningAgent& operator=(const ReinforcementLearningAgent& other) = default; // copy assignment
    ReinforcementLearningAgent& operator=(ReinforcementLearningAgent&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ReinforcementLearningAgent members

    /// <summary>
    /// This attribute is a variable named:Discount Factor
    /// </summary>
    double getDiscountFactor() const;
    void setDiscountFactor(double value);

    /// <summary>
    /// This attribute is a variable named:Q-Table Entries
    /// </summary>
    int64_t getQTableEntries() const;
    void setQTableEntries(int64_t value);

    /// <summary>
    /// This attribute is a variable named:Reward Signals
    /// </summary>
    int64_t getRewardSignals() const;
    void setRewardSignals(int64_t value);

    /// <summary>
    /// This attribute is a variable named:Rewards
    /// </summary>
    double getRewards() const;
    void setRewards(double value);

    /// <summary>
    /// This attribute is a variable named:Action Space
    /// </summary>
    int64_t getActionSpace() const;
    void setActionSpace(int64_t value);

    /// <summary>
    /// This attribute is a variable named:Learning Rate
    /// </summary>
    double getLearningRate() const;
    void setLearningRate(double value);

    /// <summary>
    /// This attribute is a variable named:State Representation
    /// </summary>
    std::string getStateRepresentation() const;
    void setStateRepresentation(std::string value);

    /// <summary>
    /// This attribute is a variable named:Exploration Rate
    /// </summary>
    double getExplorationRate() const;
    void setExplorationRate(double value);

    /// <summary>
    /// This attribute is a variable named:Environment Model
    /// </summary>
    double getEnvironmentModel() const;
    void setEnvironmentModel(double value);

    /// <summary>
    /// This attribute is a variable named:Value Functions
    /// </summary>
    double getValueFunctions() const;
    void setValueFunctions(double value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getGPO808() const;
    void setGPO808(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getGPO564() const;
    void setGPO564(std::string value);

    /// <summary>
    /// This attribute is a variable named:History Logs
    /// </summary>
    int64_t getHistoryLogs() const;
    void setHistoryLogs(int64_t value);

    /// <summary>
    /// This attribute is a variable named:Policy
    /// </summary>
    bool isPolicy() const;
    void setPolicy(bool value);

    /// <summary>
    /// This attribute is a variable named:State Transitions
    /// </summary>
    int64_t getStateTransitions() const;
    void setStateTransitions(int64_t value);

protected:
    double m_DiscountFactor = 0.0;
    int64_t m_Q_TableEntries = 0L;
    int64_t m_RewardSignals = 0L;
    double m_Rewards = 0.0;
    int64_t m_ActionSpace = 0L;
    double m_LearningRate = 0.0;
    std::string m_StateRepresentation = "";
    double m_ExplorationRate = 0.0;
    double m_EnvironmentModel = 0.0;
    double m_ValueFunctions = 0.0;
    int64_t m_GPO_808 = 13170L;
    std::string m_GPO_564 = "13171";
    int64_t m_HistoryLogs = 0L;
    bool m_Policy = false;
    int64_t m_StateTransitions = 0L;
};

std::vector<ReinforcementLearningAgent> createReinforcementLearningAgentVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ReinforcementLearningAgent>(const ReinforcementLearningAgent& val) {
    return val.toPropertyTree();
}

template<>
inline ReinforcementLearningAgent fromPt<ReinforcementLearningAgent>(const boost::property_tree::ptree& pt) {
    ReinforcementLearningAgent ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ReinforcementLearningAgent_H_ */
