/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "NeuralNetwork.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

NeuralNetwork::NeuralNetwork(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string NeuralNetwork::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void NeuralNetwork::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree NeuralNetwork::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("weights", m_Weights);
	pt.put("optimizerType", m_OptimizerType);
	pt.put("momentumValue", m_MomentumValue);
	pt.put("solverType", m_SolverType);
	pt.put("inputs", m_Inputs);
	pt.put("learningRate", m_LearningRate);
	pt.put("errorRate", m_ErrorRate);
	pt.put("hiddenLayers", m_HiddenLayers);
	pt.put("outputs", m_Outputs);
	pt.put("activationFunction", m_ActivationFunction);
	pt.put("networksize", m_Networksize);
	pt.put("epochs", m_Epochs);
	pt.put("costFunctionType", m_CostFunctionType);
	pt.put("gPO-b84", m_GPO_b84);
	pt.put("weightInitialization", m_WeightInitialization);
	pt.put("gPO-072", m_GPO_072);
	pt.put("iterations", m_Iterations);
	return pt;
}

void NeuralNetwork::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Weights = pt.get("weights", 0.0);
	m_OptimizerType = pt.get("optimizerType", "");
	m_MomentumValue = pt.get("momentumValue", 0.0);
	m_SolverType = pt.get("solverType", "");
	m_Inputs = pt.get("inputs", 0.0);
	m_LearningRate = pt.get("learningRate", 0.0);
	m_ErrorRate = pt.get("errorRate", 0.0);
	m_HiddenLayers = pt.get("hiddenLayers", 0L);
	m_Outputs = pt.get("outputs", 0.0);
	m_ActivationFunction = pt.get("activationFunction", "");
	m_Networksize = pt.get("networksize", 0L);
	m_Epochs = pt.get("epochs", 0L);
	m_CostFunctionType = pt.get("costFunctionType", "");
	m_GPO_b84 = pt.get("gPO-b84", 2612L);
	m_WeightInitialization = pt.get("weightInitialization", "");
	m_GPO_072 = pt.get("gPO-072", "2613");
	m_Iterations = pt.get("iterations", 0L);
}

double NeuralNetwork::getWeights() const
{
    return m_Weights;
}

void NeuralNetwork::setWeights(double value)
{
    m_Weights = value;
}


std::string NeuralNetwork::getOptimizerType() const
{
    return m_OptimizerType;
}

void NeuralNetwork::setOptimizerType(std::string value)
{
    m_OptimizerType = value;
}


double NeuralNetwork::getMomentumValue() const
{
    return m_MomentumValue;
}

void NeuralNetwork::setMomentumValue(double value)
{
    m_MomentumValue = value;
}


std::string NeuralNetwork::getSolverType() const
{
    return m_SolverType;
}

void NeuralNetwork::setSolverType(std::string value)
{
    m_SolverType = value;
}


double NeuralNetwork::getInputs() const
{
    return m_Inputs;
}

void NeuralNetwork::setInputs(double value)
{
    m_Inputs = value;
}


double NeuralNetwork::getLearningRate() const
{
    return m_LearningRate;
}

void NeuralNetwork::setLearningRate(double value)
{
    m_LearningRate = value;
}


double NeuralNetwork::getErrorRate() const
{
    return m_ErrorRate;
}

void NeuralNetwork::setErrorRate(double value)
{
    m_ErrorRate = value;
}


int64_t NeuralNetwork::getHiddenLayers() const
{
    return m_HiddenLayers;
}

void NeuralNetwork::setHiddenLayers(int64_t value)
{
    m_HiddenLayers = value;
}


double NeuralNetwork::getOutputs() const
{
    return m_Outputs;
}

void NeuralNetwork::setOutputs(double value)
{
    m_Outputs = value;
}


std::string NeuralNetwork::getActivationFunction() const
{
    return m_ActivationFunction;
}

void NeuralNetwork::setActivationFunction(std::string value)
{
    m_ActivationFunction = value;
}


int64_t NeuralNetwork::getNetworksize() const
{
    return m_Networksize;
}

void NeuralNetwork::setNetworksize(int64_t value)
{
    m_Networksize = value;
}


int64_t NeuralNetwork::getEpochs() const
{
    return m_Epochs;
}

void NeuralNetwork::setEpochs(int64_t value)
{
    m_Epochs = value;
}


std::string NeuralNetwork::getCostFunctionType() const
{
    return m_CostFunctionType;
}

void NeuralNetwork::setCostFunctionType(std::string value)
{
    m_CostFunctionType = value;
}


int64_t NeuralNetwork::getGPOB84() const
{
    return m_GPO_b84;
}

void NeuralNetwork::setGPOB84(int64_t value)
{
    m_GPO_b84 = value;
}


std::string NeuralNetwork::getWeightInitialization() const
{
    return m_WeightInitialization;
}

void NeuralNetwork::setWeightInitialization(std::string value)
{
    m_WeightInitialization = value;
}


std::string NeuralNetwork::getGPO072() const
{
    return m_GPO_072;
}

void NeuralNetwork::setGPO072(std::string value)
{
    m_GPO_072 = value;
}


int64_t NeuralNetwork::getIterations() const
{
    return m_Iterations;
}

void NeuralNetwork::setIterations(int64_t value)
{
    m_Iterations = value;
}



std::vector<NeuralNetwork> createNeuralNetworkVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<NeuralNetwork>();
    for (const auto& child: pt) {
        vec.emplace_back(NeuralNetwork(child.second));
    }

    return vec;
}

}
}
}
}

