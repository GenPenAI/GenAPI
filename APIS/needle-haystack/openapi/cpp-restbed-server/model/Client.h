/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Client.h
 *
 * 
 */

#ifndef Client_H_
#define Client_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Client 
{
public:
    Client() = default;
    explicit Client(boost::property_tree::ptree const& pt);
    virtual ~Client() = default;

    Client(const Client& other) = default; // copy constructor
    Client(Client&& other) noexcept = default; // move constructor

    Client& operator=(const Client& other) = default; // copy assignment
    Client& operator=(Client&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Client members

    /// <summary>
    /// This attribute is a variable named address
    /// </summary>
    std::string getAddress() const;
    void setAddress(std::string value);

    /// <summary>
    /// This attribute is a variable named status
    /// </summary>
    bool isStatus() const;
    void setStatus(bool value);

    /// <summary>
    /// This attribute is a variable named fk_group_id
    /// </summary>
    int32_t getFkGroupId() const;
    void setFkGroupId(int32_t value);

    /// <summary>
    /// This attribute is a variable named credit_rating
    /// </summary>
    double getCreditRating() const;
    void setCreditRating(double value);

    /// <summary>
    /// This attribute is a variable named active
    /// </summary>
    bool isActive() const;
    void setActive(bool value);

    /// <summary>
    /// This attribute is a variable named email
    /// </summary>
    std::string getEmail() const;
    void setEmail(std::string value);

    /// <summary>
    /// This attribute is a variable named created_date
    /// </summary>
    std::string getCreatedDate() const;
    void setCreatedDate(std::string value);

    /// <summary>
    /// This attribute is a variable named fk_client_id
    /// </summary>
    int32_t getFkClientId() const;
    void setFkClientId(int32_t value);

    /// <summary>
    /// This is a GenPen.AI specific attribute
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// This is a GenPen.AI specific attribute
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// This attribute is a variable named updated_date
    /// </summary>
    std::string getUpdatedDate() const;
    void setUpdatedDate(std::string value);

    /// <summary>
    /// This attribute is a variable named phone
    /// </summary>
    std::string getPhone() const;
    void setPhone(std::string value);

    /// <summary>
    /// This attribute is a variable named last_login_date
    /// </summary>
    std::string getLastLoginDate() const;
    void setLastLoginDate(std::string value);

protected:
    std::string m_Address = "";
    bool m_Status = false;
    int32_t m_Fk_group_id = 0;
    double m_Credit_rating = 0.0;
    bool m_Active = false;
    std::string m_Email = "";
    std::string m_Created_date = "";
    int32_t m_Fk_client_id = 0;
    int32_t m_Id = 0;
    std::string m_Name = "";
    std::string m_Updated_date = "";
    std::string m_Phone = "";
    std::string m_Last_login_date = "";
};

std::vector<Client> createClientVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Client>(const Client& val) {
    return val.toPropertyTree();
}

template<>
inline Client fromPt<Client>(const boost::property_tree::ptree& pt) {
    Client ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Client_H_ */
