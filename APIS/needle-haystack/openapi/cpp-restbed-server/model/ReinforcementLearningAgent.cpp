/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ReinforcementLearningAgent.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ReinforcementLearningAgent::ReinforcementLearningAgent(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ReinforcementLearningAgent::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ReinforcementLearningAgent::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ReinforcementLearningAgent::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("discountFactor", m_DiscountFactor);
	pt.put("q-TableEntries", m_Q_TableEntries);
	pt.put("rewardSignals", m_RewardSignals);
	pt.put("rewards", m_Rewards);
	pt.put("actionSpace", m_ActionSpace);
	pt.put("learningRate", m_LearningRate);
	pt.put("stateRepresentation", m_StateRepresentation);
	pt.put("explorationRate", m_ExplorationRate);
	pt.put("environmentModel", m_EnvironmentModel);
	pt.put("valueFunctions", m_ValueFunctions);
	pt.put("gPO-808", m_GPO_808);
	pt.put("gPO-564", m_GPO_564);
	pt.put("historyLogs", m_HistoryLogs);
	pt.put("policy", m_Policy);
	pt.put("stateTransitions", m_StateTransitions);
	return pt;
}

void ReinforcementLearningAgent::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_DiscountFactor = pt.get("discountFactor", 0.0);
	m_Q_TableEntries = pt.get("q-TableEntries", 0L);
	m_RewardSignals = pt.get("rewardSignals", 0L);
	m_Rewards = pt.get("rewards", 0.0);
	m_ActionSpace = pt.get("actionSpace", 0L);
	m_LearningRate = pt.get("learningRate", 0.0);
	m_StateRepresentation = pt.get("stateRepresentation", "");
	m_ExplorationRate = pt.get("explorationRate", 0.0);
	m_EnvironmentModel = pt.get("environmentModel", 0.0);
	m_ValueFunctions = pt.get("valueFunctions", 0.0);
	m_GPO_808 = pt.get("gPO-808", 13170L);
	m_GPO_564 = pt.get("gPO-564", "13171");
	m_HistoryLogs = pt.get("historyLogs", 0L);
	m_Policy = pt.get("policy", false);
	m_StateTransitions = pt.get("stateTransitions", 0L);
}

double ReinforcementLearningAgent::getDiscountFactor() const
{
    return m_DiscountFactor;
}

void ReinforcementLearningAgent::setDiscountFactor(double value)
{
    m_DiscountFactor = value;
}


int64_t ReinforcementLearningAgent::getQTableEntries() const
{
    return m_Q_TableEntries;
}

void ReinforcementLearningAgent::setQTableEntries(int64_t value)
{
    m_Q_TableEntries = value;
}


int64_t ReinforcementLearningAgent::getRewardSignals() const
{
    return m_RewardSignals;
}

void ReinforcementLearningAgent::setRewardSignals(int64_t value)
{
    m_RewardSignals = value;
}


double ReinforcementLearningAgent::getRewards() const
{
    return m_Rewards;
}

void ReinforcementLearningAgent::setRewards(double value)
{
    m_Rewards = value;
}


int64_t ReinforcementLearningAgent::getActionSpace() const
{
    return m_ActionSpace;
}

void ReinforcementLearningAgent::setActionSpace(int64_t value)
{
    m_ActionSpace = value;
}


double ReinforcementLearningAgent::getLearningRate() const
{
    return m_LearningRate;
}

void ReinforcementLearningAgent::setLearningRate(double value)
{
    m_LearningRate = value;
}


std::string ReinforcementLearningAgent::getStateRepresentation() const
{
    return m_StateRepresentation;
}

void ReinforcementLearningAgent::setStateRepresentation(std::string value)
{
    m_StateRepresentation = value;
}


double ReinforcementLearningAgent::getExplorationRate() const
{
    return m_ExplorationRate;
}

void ReinforcementLearningAgent::setExplorationRate(double value)
{
    m_ExplorationRate = value;
}


double ReinforcementLearningAgent::getEnvironmentModel() const
{
    return m_EnvironmentModel;
}

void ReinforcementLearningAgent::setEnvironmentModel(double value)
{
    m_EnvironmentModel = value;
}


double ReinforcementLearningAgent::getValueFunctions() const
{
    return m_ValueFunctions;
}

void ReinforcementLearningAgent::setValueFunctions(double value)
{
    m_ValueFunctions = value;
}


int64_t ReinforcementLearningAgent::getGPO808() const
{
    return m_GPO_808;
}

void ReinforcementLearningAgent::setGPO808(int64_t value)
{
    m_GPO_808 = value;
}


std::string ReinforcementLearningAgent::getGPO564() const
{
    return m_GPO_564;
}

void ReinforcementLearningAgent::setGPO564(std::string value)
{
    m_GPO_564 = value;
}


int64_t ReinforcementLearningAgent::getHistoryLogs() const
{
    return m_HistoryLogs;
}

void ReinforcementLearningAgent::setHistoryLogs(int64_t value)
{
    m_HistoryLogs = value;
}


bool ReinforcementLearningAgent::isPolicy() const
{
    return m_Policy;
}

void ReinforcementLearningAgent::setPolicy(bool value)
{
    m_Policy = value;
}


int64_t ReinforcementLearningAgent::getStateTransitions() const
{
    return m_StateTransitions;
}

void ReinforcementLearningAgent::setStateTransitions(int64_t value)
{
    m_StateTransitions = value;
}



std::vector<ReinforcementLearningAgent> createReinforcementLearningAgentVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ReinforcementLearningAgent>();
    for (const auto& child: pt) {
        vec.emplace_back(ReinforcementLearningAgent(child.second));
    }

    return vec;
}

}
}
}
}

