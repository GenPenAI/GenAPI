/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MetalRefinery.h
 *
 * 
 */

#ifndef MetalRefinery_H_
#define MetalRefinery_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  MetalRefinery 
{
public:
    MetalRefinery() = default;
    explicit MetalRefinery(boost::property_tree::ptree const& pt);
    virtual ~MetalRefinery() = default;

    MetalRefinery(const MetalRefinery& other) = default; // copy constructor
    MetalRefinery(MetalRefinery&& other) noexcept = default; // move constructor

    MetalRefinery& operator=(const MetalRefinery& other) = default; // copy assignment
    MetalRefinery& operator=(MetalRefinery&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MetalRefinery members

    /// <summary>
    /// This attribute is a variable named status
    /// </summary>
    bool isStatus() const;
    void setStatus(bool value);

    /// <summary>
    /// This attribute is a variable named capacity
    /// </summary>
    int32_t getCapacity() const;
    void setCapacity(int32_t value);

    /// <summary>
    /// This attribute is a variable named type
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// This attribute is a variable named location
    /// </summary>
    std::string getLocation() const;
    void setLocation(std::string value);

    /// <summary>
    /// This attribute is a variable named fk_production_site_id
    /// </summary>
    int32_t getFkProductionSiteId() const;
    void setFkProductionSiteId(int32_t value);

    /// <summary>
    /// This attribute is a variable named close_time
    /// </summary>
    std::string getCloseTime() const;
    void setCloseTime(std::string value);

    /// <summary>
    /// This attribute is a variable named open_time
    /// </summary>
    std::string getOpenTime() const;
    void setOpenTime(std::string value);

    /// <summary>
    /// This attribute is a variable named fk_object_id
    /// </summary>
    int32_t getFkObjectId() const;
    void setFkObjectId(int32_t value);

    /// <summary>
    /// This is a GenPen.AI specific attribute
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// This attribute is a variable named life_expectancy
    /// </summary>
    int32_t getLifeExpectancy() const;
    void setLifeExpectancy(int32_t value);

    /// <summary>
    /// This attribute is a variable named efficiency
    /// </summary>
    double getEfficiency() const;
    void setEfficiency(double value);

    /// <summary>
    /// This is a GenPen.AI specific attribute
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// This attribute is a variable named cost
    /// </summary>
    double getCost() const;
    void setCost(double value);

protected:
    bool m_Status = false;
    int32_t m_Capacity = 0;
    std::string m_Type = "";
    std::string m_Location = "";
    int32_t m_Fk_production_site_id = 0;
    std::string m_Close_time = "";
    std::string m_Open_time = "";
    int32_t m_Fk_object_id = 0;
    int32_t m_Id = 0;
    int32_t m_Life_expectancy = 0;
    double m_Efficiency = 0.0;
    std::string m_Name = "";
    double m_Cost = 0.0;
};

std::vector<MetalRefinery> createMetalRefineryVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MetalRefinery>(const MetalRefinery& val) {
    return val.toPropertyTree();
}

template<>
inline MetalRefinery fromPt<MetalRefinery>(const boost::property_tree::ptree& pt) {
    MetalRefinery ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MetalRefinery_H_ */
