/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MetalRefinery.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

MetalRefinery::MetalRefinery(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string MetalRefinery::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void MetalRefinery::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree MetalRefinery::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("status", m_Status);
	pt.put("capacity", m_Capacity);
	pt.put("type", m_Type);
	pt.put("location", m_Location);
	pt.put("fk_production_site_id", m_Fk_production_site_id);
	pt.put("close_time", m_Close_time);
	pt.put("open_time", m_Open_time);
	pt.put("fk_object_id", m_Fk_object_id);
	pt.put("id", m_Id);
	pt.put("life_expectancy", m_Life_expectancy);
	pt.put("efficiency", m_Efficiency);
	pt.put("name", m_Name);
	pt.put("cost", m_Cost);
	return pt;
}

void MetalRefinery::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Status = pt.get("status", false);
	m_Capacity = pt.get("capacity", 0);
	m_Type = pt.get("type", "");
	m_Location = pt.get("location", "");
	m_Fk_production_site_id = pt.get("fk_production_site_id", 0);
	m_Close_time = pt.get("close_time", "");
	m_Open_time = pt.get("open_time", "");
	m_Fk_object_id = pt.get("fk_object_id", 0);
	m_Id = pt.get("id", 0);
	m_Life_expectancy = pt.get("life_expectancy", 0);
	m_Efficiency = pt.get("efficiency", 0.0);
	m_Name = pt.get("name", "");
	m_Cost = pt.get("cost", 0.0);
}

bool MetalRefinery::isStatus() const
{
    return m_Status;
}

void MetalRefinery::setStatus(bool value)
{
    m_Status = value;
}


int32_t MetalRefinery::getCapacity() const
{
    return m_Capacity;
}

void MetalRefinery::setCapacity(int32_t value)
{
    m_Capacity = value;
}


std::string MetalRefinery::getType() const
{
    return m_Type;
}

void MetalRefinery::setType(std::string value)
{
    m_Type = value;
}


std::string MetalRefinery::getLocation() const
{
    return m_Location;
}

void MetalRefinery::setLocation(std::string value)
{
    m_Location = value;
}


int32_t MetalRefinery::getFkProductionSiteId() const
{
    return m_Fk_production_site_id;
}

void MetalRefinery::setFkProductionSiteId(int32_t value)
{
    m_Fk_production_site_id = value;
}


std::string MetalRefinery::getCloseTime() const
{
    return m_Close_time;
}

void MetalRefinery::setCloseTime(std::string value)
{
    m_Close_time = value;
}


std::string MetalRefinery::getOpenTime() const
{
    return m_Open_time;
}

void MetalRefinery::setOpenTime(std::string value)
{
    m_Open_time = value;
}


int32_t MetalRefinery::getFkObjectId() const
{
    return m_Fk_object_id;
}

void MetalRefinery::setFkObjectId(int32_t value)
{
    m_Fk_object_id = value;
}


int32_t MetalRefinery::getId() const
{
    return m_Id;
}

void MetalRefinery::setId(int32_t value)
{
    m_Id = value;
}


int32_t MetalRefinery::getLifeExpectancy() const
{
    return m_Life_expectancy;
}

void MetalRefinery::setLifeExpectancy(int32_t value)
{
    m_Life_expectancy = value;
}


double MetalRefinery::getEfficiency() const
{
    return m_Efficiency;
}

void MetalRefinery::setEfficiency(double value)
{
    m_Efficiency = value;
}


std::string MetalRefinery::getName() const
{
    return m_Name;
}

void MetalRefinery::setName(std::string value)
{
    m_Name = value;
}


double MetalRefinery::getCost() const
{
    return m_Cost;
}

void MetalRefinery::setCost(double value)
{
    m_Cost = value;
}



std::vector<MetalRefinery> createMetalRefineryVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<MetalRefinery>();
    for (const auto& child: pt) {
        vec.emplace_back(MetalRefinery(child.second));
    }

    return vec;
}

}
}
}
}

