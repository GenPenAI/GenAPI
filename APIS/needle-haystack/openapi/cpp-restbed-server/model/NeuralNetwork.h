/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NeuralNetwork.h
 *
 * 
 */

#ifndef NeuralNetwork_H_
#define NeuralNetwork_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  NeuralNetwork 
{
public:
    NeuralNetwork() = default;
    explicit NeuralNetwork(boost::property_tree::ptree const& pt);
    virtual ~NeuralNetwork() = default;

    NeuralNetwork(const NeuralNetwork& other) = default; // copy constructor
    NeuralNetwork(NeuralNetwork&& other) noexcept = default; // move constructor

    NeuralNetwork& operator=(const NeuralNetwork& other) = default; // copy assignment
    NeuralNetwork& operator=(NeuralNetwork&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// NeuralNetwork members

    /// <summary>
    /// This attribute is a variable named:Weights
    /// </summary>
    double getWeights() const;
    void setWeights(double value);

    /// <summary>
    /// This attribute is a variable named:OptimizerType
    /// </summary>
    std::string getOptimizerType() const;
    void setOptimizerType(std::string value);

    /// <summary>
    /// This attribute is a variable named:MomentumValue
    /// </summary>
    double getMomentumValue() const;
    void setMomentumValue(double value);

    /// <summary>
    /// This attribute is a variable named:SolverType
    /// </summary>
    std::string getSolverType() const;
    void setSolverType(std::string value);

    /// <summary>
    /// This attribute is a variable named:Inputs
    /// </summary>
    double getInputs() const;
    void setInputs(double value);

    /// <summary>
    /// This attribute is a variable named:LearningRate
    /// </summary>
    double getLearningRate() const;
    void setLearningRate(double value);

    /// <summary>
    /// This attribute is a variable named:ErrorRate
    /// </summary>
    double getErrorRate() const;
    void setErrorRate(double value);

    /// <summary>
    /// This attribute is a variable named:HiddenLayers
    /// </summary>
    int64_t getHiddenLayers() const;
    void setHiddenLayers(int64_t value);

    /// <summary>
    /// This attribute is a variable named:Outputs
    /// </summary>
    double getOutputs() const;
    void setOutputs(double value);

    /// <summary>
    /// This attribute is a variable named:ActivationFunction
    /// </summary>
    std::string getActivationFunction() const;
    void setActivationFunction(std::string value);

    /// <summary>
    /// This attribute is a variable named:Networksize
    /// </summary>
    int64_t getNetworksize() const;
    void setNetworksize(int64_t value);

    /// <summary>
    /// This attribute is a variable named:Epochs
    /// </summary>
    int64_t getEpochs() const;
    void setEpochs(int64_t value);

    /// <summary>
    /// This attribute is a variable named:CostFunctionType
    /// </summary>
    std::string getCostFunctionType() const;
    void setCostFunctionType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getGPOB84() const;
    void setGPOB84(int64_t value);

    /// <summary>
    /// This attribute is a variable named:WeightInitialization
    /// </summary>
    std::string getWeightInitialization() const;
    void setWeightInitialization(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getGPO072() const;
    void setGPO072(std::string value);

    /// <summary>
    /// This attribute is a variable named:Iterations
    /// </summary>
    int64_t getIterations() const;
    void setIterations(int64_t value);

protected:
    double m_Weights = 0.0;
    std::string m_OptimizerType = "";
    double m_MomentumValue = 0.0;
    std::string m_SolverType = "";
    double m_Inputs = 0.0;
    double m_LearningRate = 0.0;
    double m_ErrorRate = 0.0;
    int64_t m_HiddenLayers = 0L;
    double m_Outputs = 0.0;
    std::string m_ActivationFunction = "";
    int64_t m_Networksize = 0L;
    int64_t m_Epochs = 0L;
    std::string m_CostFunctionType = "";
    int64_t m_GPO_b84 = 2612L;
    std::string m_WeightInitialization = "";
    std::string m_GPO_072 = "2613";
    int64_t m_Iterations = 0L;
};

std::vector<NeuralNetwork> createNeuralNetworkVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<NeuralNetwork>(const NeuralNetwork& val) {
    return val.toPropertyTree();
}

template<>
inline NeuralNetwork fromPt<NeuralNetwork>(const boost::property_tree::ptree& pt) {
    NeuralNetwork ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* NeuralNetwork_H_ */
