/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Mine.h
 *
 * 
 */

#ifndef Mine_H_
#define Mine_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Mine 
{
public:
    Mine() = default;
    explicit Mine(boost::property_tree::ptree const& pt);
    virtual ~Mine() = default;

    Mine(const Mine& other) = default; // copy constructor
    Mine(Mine&& other) noexcept = default; // move constructor

    Mine& operator=(const Mine& other) = default; // copy assignment
    Mine& operator=(Mine&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Mine members

    /// <summary>
    /// This attribute is a variable named capacity_unit
    /// </summary>
    std::string getCapacityUnit() const;
    void setCapacityUnit(std::string value);

    /// <summary>
    /// This attribute is a variable named capacity
    /// </summary>
    int32_t getCapacity() const;
    void setCapacity(int32_t value);

    /// <summary>
    /// This attribute is a variable named power_usage
    /// </summary>
    double getPowerUsage() const;
    void setPowerUsage(double value);

    /// <summary>
    /// This attribute is a variable named duration_its_been_active
    /// </summary>
    int32_t getDurationItsBeenActive() const;
    void setDurationItsBeenActive(int32_t value);

    /// <summary>
    /// This attribute is a variable named active
    /// </summary>
    bool isActive() const;
    void setActive(bool value);

    /// <summary>
    /// This attribute is a variable named fk_sender_id
    /// </summary>
    int32_t getFkSenderId() const;
    void setFkSenderId(int32_t value);

    /// <summary>
    /// This attribute is a variable named risk_level
    /// </summary>
    int32_t getRiskLevel() const;
    void setRiskLevel(int32_t value);

    /// <summary>
    /// This attribute is a variable named created_date
    /// </summary>
    std::string getCreatedDate() const;
    void setCreatedDate(std::string value);

    /// <summary>
    /// This attribute is a variable named fk_owner_id
    /// </summary>
    int32_t getFkOwnerId() const;
    void setFkOwnerId(int32_t value);

    /// <summary>
    /// This attribute is a variable named mined
    /// </summary>
    bool isMined() const;
    void setMined(bool value);

    /// <summary>
    /// This attribute is a variable named length
    /// </summary>
    int32_t getLength() const;
    void setLength(int32_t value);

    /// <summary>
    /// This is a GenPen.AI specific attribute
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// This attribute is a variable named date_mined
    /// </summary>
    std::string getDateMined() const;
    void setDateMined(std::string value);

    /// <summary>
    /// This attribute is a variable named width
    /// </summary>
    int32_t getWidth() const;
    void setWidth(int32_t value);

    /// <summary>
    /// This is a GenPen.AI specific attribute
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// This attribute is a variable named commodity_type
    /// </summary>
    std::string getCommodityType() const;
    void setCommodityType(std::string value);

    /// <summary>
    /// This attribute is a variable named miner_id
    /// </summary>
    int32_t getMinerId() const;
    void setMinerId(int32_t value);

protected:
    std::string m_Capacity_unit = "";
    int32_t m_Capacity = 0;
    double m_Power_usage = 0.0;
    int32_t m_Duration_its_been_active = 0;
    bool m_Active = false;
    int32_t m_Fk_sender_id = 0;
    int32_t m_Risk_level = 0;
    std::string m_Created_date = "";
    int32_t m_Fk_owner_id = 0;
    bool m_Mined = false;
    int32_t m_Length = 0;
    int32_t m_Id = 0;
    std::string m_Date_mined = "";
    int32_t m_Width = 0;
    std::string m_Name = "";
    std::string m_Commodity_type = "";
    int32_t m_Miner_id = 0;
};

std::vector<Mine> createMineVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Mine>(const Mine& val) {
    return val.toPropertyTree();
}

template<>
inline Mine fromPt<Mine>(const boost::property_tree::ptree& pt) {
    Mine ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Mine_H_ */
