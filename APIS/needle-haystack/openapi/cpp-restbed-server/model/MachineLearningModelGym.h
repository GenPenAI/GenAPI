/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MachineLearningModelGym.h
 *
 * 
 */

#ifndef MachineLearningModelGym_H_
#define MachineLearningModelGym_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  MachineLearningModelGym 
{
public:
    MachineLearningModelGym() = default;
    explicit MachineLearningModelGym(boost::property_tree::ptree const& pt);
    virtual ~MachineLearningModelGym() = default;

    MachineLearningModelGym(const MachineLearningModelGym& other) = default; // copy constructor
    MachineLearningModelGym(MachineLearningModelGym&& other) noexcept = default; // move constructor

    MachineLearningModelGym& operator=(const MachineLearningModelGym& other) = default; // copy assignment
    MachineLearningModelGym& operator=(MachineLearningModelGym&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MachineLearningModelGym members

    /// <summary>
    /// This attribute is a variable named:Maintained
    /// </summary>
    bool isMaintained() const;
    void setMaintained(bool value);

    /// <summary>
    /// This attribute is a variable named:AgeGroup
    /// </summary>
    std::string getAgeGroup() const;
    void setAgeGroup(std::string value);

    /// <summary>
    /// This attribute is a variable named:NumberOfClasses
    /// </summary>
    int64_t getNumberOfClasses() const;
    void setNumberOfClasses(int64_t value);

    /// <summary>
    /// This attribute is a variable named:MembershipFee
    /// </summary>
    double getMembershipFee() const;
    void setMembershipFee(double value);

    /// <summary>
    /// This attribute is a variable named:FitnessGoalsOffered
    /// </summary>
    std::string getFitnessGoalsOffered() const;
    void setFitnessGoalsOffered(std::string value);

    /// <summary>
    /// This attribute is a variable named:IsPopular
    /// </summary>
    bool isIsPopular() const;
    void setIsPopular(bool value);

    /// <summary>
    /// This attribute is a variable named:AccessibleHours
    /// </summary>
    int64_t getAccessibleHours() const;
    void setAccessibleHours(int64_t value);

    /// <summary>
    /// This attribute is a variable named:EquipmentType
    /// </summary>
    std::string getEquipmentType() const;
    void setEquipmentType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getGPO758() const;
    void setGPO758(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getGPOEea() const;
    void setGPOEea(std::string value);

    /// <summary>
    /// This attribute is a variable named:TotalMembership
    /// </summary>
    int64_t getTotalMembership() const;
    void setTotalMembership(int64_t value);

    /// <summary>
    /// This attribute is a variable named:GymSize
    /// </summary>
    int64_t getGymSize() const;
    void setGymSize(int64_t value);

    /// <summary>
    /// This attribute is a variable named:IsSafe
    /// </summary>
    bool isIsSafe() const;
    void setIsSafe(bool value);

    /// <summary>
    /// This attribute is a variable named:StaffCount
    /// </summary>
    int64_t getStaffCount() const;
    void setStaffCount(int64_t value);

    /// <summary>
    /// This attribute is a variable named:DiscountRate
    /// </summary>
    double getDiscountRate() const;
    void setDiscountRate(double value);

protected:
    bool m_Maintained = false;
    std::string m_AgeGroup = "";
    int64_t m_NumberOfClasses = 0L;
    double m_MembershipFee = 0.0;
    std::string m_FitnessGoalsOffered = "";
    bool m_IsPopular = false;
    int64_t m_AccessibleHours = 0L;
    std::string m_EquipmentType = "";
    int64_t m_GPO_758 = 17046L;
    std::string m_GPO_eea = "17047";
    int64_t m_TotalMembership = 0L;
    int64_t m_GymSize = 0L;
    bool m_IsSafe = false;
    int64_t m_StaffCount = 0L;
    double m_DiscountRate = 0.0;
};

std::vector<MachineLearningModelGym> createMachineLearningModelGymVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MachineLearningModelGym>(const MachineLearningModelGym& val) {
    return val.toPropertyTree();
}

template<>
inline MachineLearningModelGym fromPt<MachineLearningModelGym>(const boost::property_tree::ptree& pt) {
    MachineLearningModelGym ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MachineLearningModelGym_H_ */
