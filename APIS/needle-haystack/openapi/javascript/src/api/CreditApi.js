/**
 * API Inspector
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Credit from '../model/Credit';

/**
* Credit service.
* @module api/CreditApi
* @version 1.0.0
*/
export default class CreditApi {

    /**
    * Constructs a new CreditApi. 
    * @alias module:api/CreditApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCredit operation.
     * @callback module:api/CreditApi~createCreditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Credit
     * This can only be done by the logged in user.
     * @param {Object} opts Optional parameters
     * @param {module:model/Credit} opts.credit Created credit object
     * @param {module:api/CreditApi~createCreditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credit}
     */
    createCredit(opts, callback) {
      opts = opts || {};
      let postBody = opts['credit'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Credit;
      return this.apiClient.callApi(
        '/credit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCreditsWithListInput operation.
     * @callback module:api/CreditApi~createCreditsWithListInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates list of Credit with given input array
     * Creates list of credit with given input array
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Credit>} opts.credit 
     * @param {module:api/CreditApi~createCreditsWithListInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credit}
     */
    createCreditsWithListInput(opts, callback) {
      opts = opts || {};
      let postBody = opts['credit'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Credit;
      return this.apiClient.callApi(
        '/credit/createWithList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCredit operation.
     * @callback module:api/CreditApi~deleteCreditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete credit
     * This can only be done by the logged in user.
     * @param {String} name The credit that needs to be deleted by name
     * @param {module:api/CreditApi~deleteCreditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCredit(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteCredit");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditByName operation.
     * @callback module:api/CreditApi~getCreditByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credit by name
     * 
     * @param {String} name The name that needs to be fetched. Use credit1 for testing. 
     * @param {module:api/CreditApi~getCreditByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credit}
     */
    getCreditByName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getCreditByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Credit;
      return this.apiClient.callApi(
        '/credit/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCredit operation.
     * @callback module:api/CreditApi~updateCreditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update credit
     * This can only be done by the logged in user.
     * @param {String} name name of credit that needs to be deleted
     * @param {Object} opts Optional parameters
     * @param {module:model/Credit} opts.credit Update an existent credit in the system
     * @param {module:api/CreditApi~updateCreditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCredit(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['credit'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateCredit");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
