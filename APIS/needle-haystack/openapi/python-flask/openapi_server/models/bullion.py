# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Bullion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, shape=None, price_per_oz=None, purity_percentage=None, notes=None, value=None, year_issued=None, purity=None, date_of_sale=None, gold_troy_oz=None, fk_owner_id=None, num_ingots=None, id=None, weight=None, date_of_purchase=None, name=None, fk_id=None, metal_type=None):  # noqa: E501
        """Bullion - a model defined in OpenAPI

        :param status: The status of this Bullion.  # noqa: E501
        :type status: str
        :param shape: The shape of this Bullion.  # noqa: E501
        :type shape: str
        :param price_per_oz: The price_per_oz of this Bullion.  # noqa: E501
        :type price_per_oz: float
        :param purity_percentage: The purity_percentage of this Bullion.  # noqa: E501
        :type purity_percentage: float
        :param notes: The notes of this Bullion.  # noqa: E501
        :type notes: str
        :param value: The value of this Bullion.  # noqa: E501
        :type value: float
        :param year_issued: The year_issued of this Bullion.  # noqa: E501
        :type year_issued: int
        :param purity: The purity of this Bullion.  # noqa: E501
        :type purity: float
        :param date_of_sale: The date_of_sale of this Bullion.  # noqa: E501
        :type date_of_sale: str
        :param gold_troy_oz: The gold_troy_oz of this Bullion.  # noqa: E501
        :type gold_troy_oz: float
        :param fk_owner_id: The fk_owner_id of this Bullion.  # noqa: E501
        :type fk_owner_id: int
        :param num_ingots: The num_ingots of this Bullion.  # noqa: E501
        :type num_ingots: int
        :param id: The id of this Bullion.  # noqa: E501
        :type id: int
        :param weight: The weight of this Bullion.  # noqa: E501
        :type weight: float
        :param date_of_purchase: The date_of_purchase of this Bullion.  # noqa: E501
        :type date_of_purchase: str
        :param name: The name of this Bullion.  # noqa: E501
        :type name: str
        :param fk_id: The fk_id of this Bullion.  # noqa: E501
        :type fk_id: int
        :param metal_type: The metal_type of this Bullion.  # noqa: E501
        :type metal_type: str
        """
        self.openapi_types = {
            'status': str,
            'shape': str,
            'price_per_oz': float,
            'purity_percentage': float,
            'notes': str,
            'value': float,
            'year_issued': int,
            'purity': float,
            'date_of_sale': str,
            'gold_troy_oz': float,
            'fk_owner_id': int,
            'num_ingots': int,
            'id': int,
            'weight': float,
            'date_of_purchase': str,
            'name': str,
            'fk_id': int,
            'metal_type': str
        }

        self.attribute_map = {
            'status': 'status',
            'shape': 'shape',
            'price_per_oz': 'price_per_oz',
            'purity_percentage': 'purity_percentage',
            'notes': 'notes',
            'value': 'value',
            'year_issued': 'year_issued',
            'purity': 'purity',
            'date_of_sale': 'date_of_sale',
            'gold_troy_oz': 'gold_troy_oz',
            'fk_owner_id': 'fk_owner_id',
            'num_ingots': 'num_ingots',
            'id': 'id',
            'weight': 'weight',
            'date_of_purchase': 'date_of_purchase',
            'name': 'name',
            'fk_id': 'fk_id',
            'metal_type': 'metal_type'
        }

        self._status = status
        self._shape = shape
        self._price_per_oz = price_per_oz
        self._purity_percentage = purity_percentage
        self._notes = notes
        self._value = value
        self._year_issued = year_issued
        self._purity = purity
        self._date_of_sale = date_of_sale
        self._gold_troy_oz = gold_troy_oz
        self._fk_owner_id = fk_owner_id
        self._num_ingots = num_ingots
        self._id = id
        self._weight = weight
        self._date_of_purchase = date_of_purchase
        self._name = name
        self._fk_id = fk_id
        self._metal_type = metal_type

    @classmethod
    def from_dict(cls, dikt) -> 'Bullion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bullion of this Bullion.  # noqa: E501
        :rtype: Bullion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this Bullion.

        This attribute is a variable named status  # noqa: E501

        :return: The status of this Bullion.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Bullion.

        This attribute is a variable named status  # noqa: E501

        :param status: The status of this Bullion.
        :type status: str
        """

        self._status = status

    @property
    def shape(self):
        """Gets the shape of this Bullion.

        This attribute is a variable named shape  # noqa: E501

        :return: The shape of this Bullion.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this Bullion.

        This attribute is a variable named shape  # noqa: E501

        :param shape: The shape of this Bullion.
        :type shape: str
        """

        self._shape = shape

    @property
    def price_per_oz(self):
        """Gets the price_per_oz of this Bullion.

        This attribute is a variable named price_per_oz  # noqa: E501

        :return: The price_per_oz of this Bullion.
        :rtype: float
        """
        return self._price_per_oz

    @price_per_oz.setter
    def price_per_oz(self, price_per_oz):
        """Sets the price_per_oz of this Bullion.

        This attribute is a variable named price_per_oz  # noqa: E501

        :param price_per_oz: The price_per_oz of this Bullion.
        :type price_per_oz: float
        """

        self._price_per_oz = price_per_oz

    @property
    def purity_percentage(self):
        """Gets the purity_percentage of this Bullion.

        This attribute is a variable named purity_percentage  # noqa: E501

        :return: The purity_percentage of this Bullion.
        :rtype: float
        """
        return self._purity_percentage

    @purity_percentage.setter
    def purity_percentage(self, purity_percentage):
        """Sets the purity_percentage of this Bullion.

        This attribute is a variable named purity_percentage  # noqa: E501

        :param purity_percentage: The purity_percentage of this Bullion.
        :type purity_percentage: float
        """

        self._purity_percentage = purity_percentage

    @property
    def notes(self):
        """Gets the notes of this Bullion.

        This attribute is a variable named notes  # noqa: E501

        :return: The notes of this Bullion.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Bullion.

        This attribute is a variable named notes  # noqa: E501

        :param notes: The notes of this Bullion.
        :type notes: str
        """

        self._notes = notes

    @property
    def value(self):
        """Gets the value of this Bullion.

        This attribute is a variable named value  # noqa: E501

        :return: The value of this Bullion.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Bullion.

        This attribute is a variable named value  # noqa: E501

        :param value: The value of this Bullion.
        :type value: float
        """

        self._value = value

    @property
    def year_issued(self):
        """Gets the year_issued of this Bullion.

        This attribute is a variable named year_issued  # noqa: E501

        :return: The year_issued of this Bullion.
        :rtype: int
        """
        return self._year_issued

    @year_issued.setter
    def year_issued(self, year_issued):
        """Sets the year_issued of this Bullion.

        This attribute is a variable named year_issued  # noqa: E501

        :param year_issued: The year_issued of this Bullion.
        :type year_issued: int
        """
        if year_issued is not None and year_issued > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `year_issued`, must be a value less than or equal to `10000000`")  # noqa: E501
        if year_issued is not None and year_issued < 0:  # noqa: E501
            raise ValueError("Invalid value for `year_issued`, must be a value greater than or equal to `0`")  # noqa: E501

        self._year_issued = year_issued

    @property
    def purity(self):
        """Gets the purity of this Bullion.

        This attribute is a variable named purity  # noqa: E501

        :return: The purity of this Bullion.
        :rtype: float
        """
        return self._purity

    @purity.setter
    def purity(self, purity):
        """Sets the purity of this Bullion.

        This attribute is a variable named purity  # noqa: E501

        :param purity: The purity of this Bullion.
        :type purity: float
        """

        self._purity = purity

    @property
    def date_of_sale(self):
        """Gets the date_of_sale of this Bullion.

        This attribute is a variable named date_of_sale  # noqa: E501

        :return: The date_of_sale of this Bullion.
        :rtype: str
        """
        return self._date_of_sale

    @date_of_sale.setter
    def date_of_sale(self, date_of_sale):
        """Sets the date_of_sale of this Bullion.

        This attribute is a variable named date_of_sale  # noqa: E501

        :param date_of_sale: The date_of_sale of this Bullion.
        :type date_of_sale: str
        """

        self._date_of_sale = date_of_sale

    @property
    def gold_troy_oz(self):
        """Gets the gold_troy_oz of this Bullion.

        This attribute is a variable named gold_troy_oz  # noqa: E501

        :return: The gold_troy_oz of this Bullion.
        :rtype: float
        """
        return self._gold_troy_oz

    @gold_troy_oz.setter
    def gold_troy_oz(self, gold_troy_oz):
        """Sets the gold_troy_oz of this Bullion.

        This attribute is a variable named gold_troy_oz  # noqa: E501

        :param gold_troy_oz: The gold_troy_oz of this Bullion.
        :type gold_troy_oz: float
        """

        self._gold_troy_oz = gold_troy_oz

    @property
    def fk_owner_id(self):
        """Gets the fk_owner_id of this Bullion.

        This attribute is a variable named fk_owner_id  # noqa: E501

        :return: The fk_owner_id of this Bullion.
        :rtype: int
        """
        return self._fk_owner_id

    @fk_owner_id.setter
    def fk_owner_id(self, fk_owner_id):
        """Sets the fk_owner_id of this Bullion.

        This attribute is a variable named fk_owner_id  # noqa: E501

        :param fk_owner_id: The fk_owner_id of this Bullion.
        :type fk_owner_id: int
        """
        if fk_owner_id is not None and fk_owner_id > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `fk_owner_id`, must be a value less than or equal to `10000000`")  # noqa: E501
        if fk_owner_id is not None and fk_owner_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `fk_owner_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fk_owner_id = fk_owner_id

    @property
    def num_ingots(self):
        """Gets the num_ingots of this Bullion.

        This attribute is a variable named num_ingots  # noqa: E501

        :return: The num_ingots of this Bullion.
        :rtype: int
        """
        return self._num_ingots

    @num_ingots.setter
    def num_ingots(self, num_ingots):
        """Sets the num_ingots of this Bullion.

        This attribute is a variable named num_ingots  # noqa: E501

        :param num_ingots: The num_ingots of this Bullion.
        :type num_ingots: int
        """
        if num_ingots is not None and num_ingots > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `num_ingots`, must be a value less than or equal to `10000000`")  # noqa: E501
        if num_ingots is not None and num_ingots < 0:  # noqa: E501
            raise ValueError("Invalid value for `num_ingots`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_ingots = num_ingots

    @property
    def id(self):
        """Gets the id of this Bullion.

        This is a GenPen.AI specific attribute  # noqa: E501

        :return: The id of this Bullion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bullion.

        This is a GenPen.AI specific attribute  # noqa: E501

        :param id: The id of this Bullion.
        :type id: int
        """
        if id is not None and id > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `10000000`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def weight(self):
        """Gets the weight of this Bullion.

        This attribute is a variable named weight  # noqa: E501

        :return: The weight of this Bullion.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Bullion.

        This attribute is a variable named weight  # noqa: E501

        :param weight: The weight of this Bullion.
        :type weight: float
        """

        self._weight = weight

    @property
    def date_of_purchase(self):
        """Gets the date_of_purchase of this Bullion.

        This attribute is a variable named date_of_purchase  # noqa: E501

        :return: The date_of_purchase of this Bullion.
        :rtype: str
        """
        return self._date_of_purchase

    @date_of_purchase.setter
    def date_of_purchase(self, date_of_purchase):
        """Sets the date_of_purchase of this Bullion.

        This attribute is a variable named date_of_purchase  # noqa: E501

        :param date_of_purchase: The date_of_purchase of this Bullion.
        :type date_of_purchase: str
        """

        self._date_of_purchase = date_of_purchase

    @property
    def name(self):
        """Gets the name of this Bullion.

        This is a GenPen.AI specific attribute  # noqa: E501

        :return: The name of this Bullion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bullion.

        This is a GenPen.AI specific attribute  # noqa: E501

        :param name: The name of this Bullion.
        :type name: str
        """

        self._name = name

    @property
    def fk_id(self):
        """Gets the fk_id of this Bullion.

        This attribute is a variable named fk_id  # noqa: E501

        :return: The fk_id of this Bullion.
        :rtype: int
        """
        return self._fk_id

    @fk_id.setter
    def fk_id(self, fk_id):
        """Sets the fk_id of this Bullion.

        This attribute is a variable named fk_id  # noqa: E501

        :param fk_id: The fk_id of this Bullion.
        :type fk_id: int
        """
        if fk_id is not None and fk_id > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `fk_id`, must be a value less than or equal to `10000000`")  # noqa: E501
        if fk_id is not None and fk_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `fk_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fk_id = fk_id

    @property
    def metal_type(self):
        """Gets the metal_type of this Bullion.

        This attribute is a variable named metal_type  # noqa: E501

        :return: The metal_type of this Bullion.
        :rtype: str
        """
        return self._metal_type

    @metal_type.setter
    def metal_type(self, metal_type):
        """Sets the metal_type of this Bullion.

        This attribute is a variable named metal_type  # noqa: E501

        :param metal_type: The metal_type of this Bullion.
        :type metal_type: str
        """

        self._metal_type = metal_type
