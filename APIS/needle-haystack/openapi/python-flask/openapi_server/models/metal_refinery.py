# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MetalRefinery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, capacity=None, type=None, location=None, fk_production_site_id=None, close_time=None, open_time=None, fk_object_id=None, id=None, life_expectancy=None, efficiency=None, name=None, cost=None):  # noqa: E501
        """MetalRefinery - a model defined in OpenAPI

        :param status: The status of this MetalRefinery.  # noqa: E501
        :type status: bool
        :param capacity: The capacity of this MetalRefinery.  # noqa: E501
        :type capacity: int
        :param type: The type of this MetalRefinery.  # noqa: E501
        :type type: str
        :param location: The location of this MetalRefinery.  # noqa: E501
        :type location: str
        :param fk_production_site_id: The fk_production_site_id of this MetalRefinery.  # noqa: E501
        :type fk_production_site_id: int
        :param close_time: The close_time of this MetalRefinery.  # noqa: E501
        :type close_time: str
        :param open_time: The open_time of this MetalRefinery.  # noqa: E501
        :type open_time: str
        :param fk_object_id: The fk_object_id of this MetalRefinery.  # noqa: E501
        :type fk_object_id: int
        :param id: The id of this MetalRefinery.  # noqa: E501
        :type id: int
        :param life_expectancy: The life_expectancy of this MetalRefinery.  # noqa: E501
        :type life_expectancy: int
        :param efficiency: The efficiency of this MetalRefinery.  # noqa: E501
        :type efficiency: float
        :param name: The name of this MetalRefinery.  # noqa: E501
        :type name: str
        :param cost: The cost of this MetalRefinery.  # noqa: E501
        :type cost: float
        """
        self.openapi_types = {
            'status': bool,
            'capacity': int,
            'type': str,
            'location': str,
            'fk_production_site_id': int,
            'close_time': str,
            'open_time': str,
            'fk_object_id': int,
            'id': int,
            'life_expectancy': int,
            'efficiency': float,
            'name': str,
            'cost': float
        }

        self.attribute_map = {
            'status': 'status',
            'capacity': 'capacity',
            'type': 'type',
            'location': 'location',
            'fk_production_site_id': 'fk_production_site_id',
            'close_time': 'close_time',
            'open_time': 'open_time',
            'fk_object_id': 'fk_object_id',
            'id': 'id',
            'life_expectancy': 'life_expectancy',
            'efficiency': 'efficiency',
            'name': 'name',
            'cost': 'cost'
        }

        self._status = status
        self._capacity = capacity
        self._type = type
        self._location = location
        self._fk_production_site_id = fk_production_site_id
        self._close_time = close_time
        self._open_time = open_time
        self._fk_object_id = fk_object_id
        self._id = id
        self._life_expectancy = life_expectancy
        self._efficiency = efficiency
        self._name = name
        self._cost = cost

    @classmethod
    def from_dict(cls, dikt) -> 'MetalRefinery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetalRefinery of this MetalRefinery.  # noqa: E501
        :rtype: MetalRefinery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this MetalRefinery.

        This attribute is a variable named status  # noqa: E501

        :return: The status of this MetalRefinery.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MetalRefinery.

        This attribute is a variable named status  # noqa: E501

        :param status: The status of this MetalRefinery.
        :type status: bool
        """

        self._status = status

    @property
    def capacity(self):
        """Gets the capacity of this MetalRefinery.

        This attribute is a variable named capacity  # noqa: E501

        :return: The capacity of this MetalRefinery.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this MetalRefinery.

        This attribute is a variable named capacity  # noqa: E501

        :param capacity: The capacity of this MetalRefinery.
        :type capacity: int
        """
        if capacity is not None and capacity > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value less than or equal to `10000000`")  # noqa: E501
        if capacity is not None and capacity < 0:  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._capacity = capacity

    @property
    def type(self):
        """Gets the type of this MetalRefinery.

        This attribute is a variable named type  # noqa: E501

        :return: The type of this MetalRefinery.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetalRefinery.

        This attribute is a variable named type  # noqa: E501

        :param type: The type of this MetalRefinery.
        :type type: str
        """

        self._type = type

    @property
    def location(self):
        """Gets the location of this MetalRefinery.

        This attribute is a variable named location  # noqa: E501

        :return: The location of this MetalRefinery.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MetalRefinery.

        This attribute is a variable named location  # noqa: E501

        :param location: The location of this MetalRefinery.
        :type location: str
        """

        self._location = location

    @property
    def fk_production_site_id(self):
        """Gets the fk_production_site_id of this MetalRefinery.

        This attribute is a variable named fk_production_site_id  # noqa: E501

        :return: The fk_production_site_id of this MetalRefinery.
        :rtype: int
        """
        return self._fk_production_site_id

    @fk_production_site_id.setter
    def fk_production_site_id(self, fk_production_site_id):
        """Sets the fk_production_site_id of this MetalRefinery.

        This attribute is a variable named fk_production_site_id  # noqa: E501

        :param fk_production_site_id: The fk_production_site_id of this MetalRefinery.
        :type fk_production_site_id: int
        """
        if fk_production_site_id is not None and fk_production_site_id > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `fk_production_site_id`, must be a value less than or equal to `10000000`")  # noqa: E501
        if fk_production_site_id is not None and fk_production_site_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `fk_production_site_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fk_production_site_id = fk_production_site_id

    @property
    def close_time(self):
        """Gets the close_time of this MetalRefinery.

        This attribute is a variable named close_time  # noqa: E501

        :return: The close_time of this MetalRefinery.
        :rtype: str
        """
        return self._close_time

    @close_time.setter
    def close_time(self, close_time):
        """Sets the close_time of this MetalRefinery.

        This attribute is a variable named close_time  # noqa: E501

        :param close_time: The close_time of this MetalRefinery.
        :type close_time: str
        """

        self._close_time = close_time

    @property
    def open_time(self):
        """Gets the open_time of this MetalRefinery.

        This attribute is a variable named open_time  # noqa: E501

        :return: The open_time of this MetalRefinery.
        :rtype: str
        """
        return self._open_time

    @open_time.setter
    def open_time(self, open_time):
        """Sets the open_time of this MetalRefinery.

        This attribute is a variable named open_time  # noqa: E501

        :param open_time: The open_time of this MetalRefinery.
        :type open_time: str
        """

        self._open_time = open_time

    @property
    def fk_object_id(self):
        """Gets the fk_object_id of this MetalRefinery.

        This attribute is a variable named fk_object_id  # noqa: E501

        :return: The fk_object_id of this MetalRefinery.
        :rtype: int
        """
        return self._fk_object_id

    @fk_object_id.setter
    def fk_object_id(self, fk_object_id):
        """Sets the fk_object_id of this MetalRefinery.

        This attribute is a variable named fk_object_id  # noqa: E501

        :param fk_object_id: The fk_object_id of this MetalRefinery.
        :type fk_object_id: int
        """
        if fk_object_id is not None and fk_object_id > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `fk_object_id`, must be a value less than or equal to `10000000`")  # noqa: E501
        if fk_object_id is not None and fk_object_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `fk_object_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fk_object_id = fk_object_id

    @property
    def id(self):
        """Gets the id of this MetalRefinery.

        This is a GenPen.AI specific attribute  # noqa: E501

        :return: The id of this MetalRefinery.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetalRefinery.

        This is a GenPen.AI specific attribute  # noqa: E501

        :param id: The id of this MetalRefinery.
        :type id: int
        """
        if id is not None and id > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `10000000`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def life_expectancy(self):
        """Gets the life_expectancy of this MetalRefinery.

        This attribute is a variable named life_expectancy  # noqa: E501

        :return: The life_expectancy of this MetalRefinery.
        :rtype: int
        """
        return self._life_expectancy

    @life_expectancy.setter
    def life_expectancy(self, life_expectancy):
        """Sets the life_expectancy of this MetalRefinery.

        This attribute is a variable named life_expectancy  # noqa: E501

        :param life_expectancy: The life_expectancy of this MetalRefinery.
        :type life_expectancy: int
        """
        if life_expectancy is not None and life_expectancy > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `life_expectancy`, must be a value less than or equal to `10000000`")  # noqa: E501
        if life_expectancy is not None and life_expectancy < 0:  # noqa: E501
            raise ValueError("Invalid value for `life_expectancy`, must be a value greater than or equal to `0`")  # noqa: E501

        self._life_expectancy = life_expectancy

    @property
    def efficiency(self):
        """Gets the efficiency of this MetalRefinery.

        This attribute is a variable named efficiency  # noqa: E501

        :return: The efficiency of this MetalRefinery.
        :rtype: float
        """
        return self._efficiency

    @efficiency.setter
    def efficiency(self, efficiency):
        """Sets the efficiency of this MetalRefinery.

        This attribute is a variable named efficiency  # noqa: E501

        :param efficiency: The efficiency of this MetalRefinery.
        :type efficiency: float
        """

        self._efficiency = efficiency

    @property
    def name(self):
        """Gets the name of this MetalRefinery.

        This is a GenPen.AI specific attribute  # noqa: E501

        :return: The name of this MetalRefinery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetalRefinery.

        This is a GenPen.AI specific attribute  # noqa: E501

        :param name: The name of this MetalRefinery.
        :type name: str
        """

        self._name = name

    @property
    def cost(self):
        """Gets the cost of this MetalRefinery.

        This attribute is a variable named cost  # noqa: E501

        :return: The cost of this MetalRefinery.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this MetalRefinery.

        This attribute is a variable named cost  # noqa: E501

        :param cost: The cost of this MetalRefinery.
        :type cost: float
        """

        self._cost = cost
